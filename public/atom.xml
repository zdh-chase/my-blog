<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>博博博客</title>
  <subtitle>念曲的个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zengdh.com/"/>
  <updated>2017-12-27T07:42:39.932Z</updated>
  <id>http://zengdh.com/</id>
  
  <author>
    <name>念曲</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>VUE（五. mock数据渲染、图片懒加载、nprogress进度条）</title>
    <link href="http://zengdh.com/2017/12/18/note18/"/>
    <id>http://zengdh.com/2017/12/18/note18/</id>
    <published>2017-12-18T02:27:07.490Z</published>
    <updated>2017-12-27T07:42:39.932Z</updated>
    
    <content type="html"><![CDATA[<p>vue本地数据请求配置，最新版vue-webpack-template去掉了dev-server.js和dev-client.js 改用webpack.dev.conf.js代替，同时更新了config/index.js开发模式dev下几个配置:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">autoOpenBrowser：设置启动dev服务器，打开一个新的浏览器选项卡。默认为<span class="literal">false</span>,不启动。</div><div class="line">useEslint：在webpack中使用eslint-loader。有些人可能只想在他们的IDE中使用eslint，所以可以在这里停用eslint-loader。</div><div class="line">showEslintErrorsInOverlay：如果使用eslint-loader，则此选项允许切换浏览器中显示的错误覆盖图中的eslint错误。错误仍然出现在控制台和终端，但不要再打破浏览器的工作流程。notifyOnErrors：将在构建失败时显示操作系统通知。</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="旧版dev-server-js配置本地数据访问："><a href="#旧版dev-server-js配置本地数据访问：" class="headerlink" title="旧版dev-server.js配置本地数据访问："></a>旧版dev-server.js配置本地数据访问：</h2><p>在const app = express()后，const compiler = webpack(webpackConfig)前配置即可：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">var appData = require(<span class="string">'../data.json'</span>)</div><div class="line">var data1 = appData.data1</div><div class="line">var data2 = appData.data2</div><div class="line">var apiRoutes = express.Router()</div><div class="line">//post请求</div><div class="line">apiRoutes.post(<span class="string">'/data1'</span>, <span class="keyword">function</span> (req, res) &#123;</div><div class="line">  res.json(&#123;</div><div class="line">    errno: 0,</div><div class="line">    data: data1</div><div class="line">  &#125;);</div><div class="line">&#125;)</div><div class="line">//get请求</div><div class="line">apiRoutes.get(<span class="string">'/data2'</span>, <span class="keyword">function</span> (req, res) &#123;</div><div class="line">  res.json(&#123;</div><div class="line">    errno: 0,</div><div class="line">    data: data2</div><div class="line">  &#125;);</div><div class="line">&#125;)</div><div class="line">app.use(<span class="string">'/api'</span>,apiRoutes)</div></pre></td></tr></table></figure></p>
<h2 id="新版webpack-dev-conf-js配置本地数据访问："><a href="#新版webpack-dev-conf-js配置本地数据访问：" class="headerlink" title="新版webpack.dev.conf.js配置本地数据访问："></a>新版webpack.dev.conf.js配置本地数据访问：</h2><p>在const portfinder = require(‘portfinder’)后添加<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//首先</div><div class="line">const express = require(<span class="string">'express'</span>)</div><div class="line">const app = express()</div><div class="line">var appData = require(<span class="string">'../data.json'</span>)//加载本地数据文件</div><div class="line">var data1 = appData.data1//获取对应的本地数据</div><div class="line">var data2 = appData.data2</div><div class="line">var apiRoutes = express.Router()</div><div class="line">app.use(<span class="string">'/api'</span>, apiRoutes)</div></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">//然后找到devServer,在里面添加</div><div class="line">before(app) &#123;</div><div class="line">  //get请求</div><div class="line">  app.get(<span class="string">'/api/data1'</span>, (req, res) =&gt; &#123;</div><div class="line">    res.json(&#123;</div><div class="line">      errno: 0,</div><div class="line">      data: data1</div><div class="line">    &#125;)</div><div class="line">  &#125;),</div><div class="line">  //post请求</div><div class="line">  app.post(<span class="string">'/api/data2'</span>, (req, res) =&gt; &#123;</div><div class="line">    res.json(&#123;</div><div class="line">      errno: 0,</div><div class="line">      data: data2</div><div class="line">    &#125;)</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="axios组件数据渲染"><a href="#axios组件数据渲染" class="headerlink" title="axios组件数据渲染"></a>axios组件数据渲染</h2><p>main.js<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">import axios from <span class="string">'axios'</span></div><div class="line">Vue.prototype.<span class="variable">$http</span> = axios</div></pre></td></tr></table></figure></p>
<p>页面组件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> default &#123;</div><div class="line">  name: <span class="string">'list'</span>,</div><div class="line">  <span class="function"><span class="title">data</span></span> () &#123;</div><div class="line">    <span class="built_in">return</span> &#123;</div><div class="line">      list: []</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="function"><span class="title">mounted</span></span>() &#123;</div><div class="line">    this.getList();</div><div class="line">  &#125;,</div><div class="line">  methods: &#123;</div><div class="line">    <span class="function"><span class="title">getList</span></span>() &#123;</div><div class="line">      this.<span class="variable">$http</span>.get(<span class="string">'/api/list'</span>).then(res =&gt; &#123;</div><div class="line">        this.list = res.data.result;</div><div class="line">      &#125;)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="axios-post请求参数传递格式问题，改成键值对形式"><a href="#axios-post请求参数传递格式问题，改成键值对形式" class="headerlink" title="axios post请求参数传递格式问题，改成键值对形式"></a>axios post请求参数传递格式问题，改成键值对形式</h2><p>方法一：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">getList</span></span>() &#123;</div><div class="line">      var params = new URLSearchParams()</div><div class="line">      params.append(<span class="string">'type'</span>, <span class="string">'1111'</span>);</div><div class="line">      this.<span class="variable">$http</span>.post(<span class="string">'/api/list'</span>, params).then(res =&gt; &#123;</div><div class="line">        this.list = res.data.result;</div><div class="line">      &#125;)</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>方法二，引入qs组件格式化数据：<br>main.js<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">import qs from <span class="string">'qs'</span></div><div class="line">Vue.prototype.<span class="variable">$qs</span> = qs</div></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">getList</span></span>() &#123;</div><div class="line">      const params = &#123;</div><div class="line">        <span class="built_in">type</span>: 2222</div><div class="line">      &#125;</div><div class="line">      this.<span class="variable">$http</span>.post(<span class="string">'/api/list'</span>, this.<span class="variable">$qs</span>.stringify(params)).then(res =&gt; &#123;</div><div class="line">        this.list = res.data.result;</div><div class="line">      &#125;)</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h2><p>引入VueLazyload组件，npm官网地址：<a target="_blank" href="https://www.npmjs.com/package/vue-lazyload">https://www.npmjs.com/package/vue-lazyload</a><br>在main.js引入组件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">import VueLazyload from <span class="string">'vue-lazyload'</span></div><div class="line"></div><div class="line">Vue.use(VueLazyload, &#123;</div><div class="line">  preLoad: 1.3,</div><div class="line">  error: <span class="string">'dist/error.png'</span>,</div><div class="line">  loading: <span class="string">'dist/loading.gif'</span>,</div><div class="line">  attempt: 1</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>页面组件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;img v-lazy=<span class="string">"item.img"</span>  /&gt;</div></pre></td></tr></table></figure></p>
<h2 id="nprogress进度条"><a href="#nprogress进度条" class="headerlink" title="nprogress进度条"></a>nprogress进度条</h2><p>npm地址： <a href="https://www.npmjs.com/package/nprogress" target="_blank">https://www.npmjs.com/package/nprogress</a></p>
<p>安装：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ bower install --save nprogress</div><div class="line">$ npm install --save nprogress</div></pre></td></tr></table></figure></p>
<p>路由跳转中加入顶部进度条过渡<br>man.js<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">import router from <span class="string">'./router'</span></div><div class="line">import NProgress from <span class="string">'nprogress'</span></div><div class="line">import <span class="string">'nprogress/nprogress.css'</span></div><div class="line"></div><div class="line">router.beforeEach((to,from,next) =&gt; &#123;</div><div class="line">  NProgress.start()</div><div class="line">  next()</div><div class="line">&#125;)</div><div class="line">router.afterEach(() =&gt; &#123;</div><div class="line">  NProgress.done();</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;vue本地数据请求配置，最新版vue-webpack-template去掉了dev-server.js和dev-client.js 改用webpack.dev.conf.js代替，同时更新了config/index.js开发模式dev下几个配置:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;autoOpenBrowser：设置启动dev服务器，打开一个新的浏览器选项卡。默认为&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,不启动。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;useEslint：在webpack中使用eslint-loader。有些人可能只想在他们的IDE中使用eslint，所以可以在这里停用eslint-loader。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;showEslintErrorsInOverlay：如果使用eslint-loader，则此选项允许切换浏览器中显示的错误覆盖图中的eslint错误。错误仍然出现在控制台和终端，但不要再打破浏览器的工作流程。notifyOnErrors：将在构建失败时显示操作系统通知。&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="axios" scheme="http://zengdh.com/tags/axios/"/>
    
      <category term="devServer" scheme="http://zengdh.com/tags/devServer/"/>
    
      <category term="vue-lazyload" scheme="http://zengdh.com/tags/vue-lazyload/"/>
    
  </entry>
  
  <entry>
    <title>VUE（四. axios）</title>
    <link href="http://zengdh.com/2017/12/06/note17/"/>
    <id>http://zengdh.com/2017/12/06/note17/</id>
    <published>2017-12-06T10:03:10.878Z</published>
    <updated>2017-12-06T11:25:20.506Z</updated>
    
    <content type="html"><![CDATA[<p>axios 中文文档地址：<a href="https://www.kancloud.cn/yunye/axios/234845" target="_blank">https://www.kancloud.cn/yunye/axios/234845</a><br>cdn:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://unpkg.com/axios/dist/axios.min.js</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">axios.get(url, &#123;</div><div class="line">  params: &#123;</div><div class="line">    uerId: <span class="string">'11'</span></div><div class="line">  &#125;,</div><div class="line">  headers: &#123;</div><div class="line">    token: <span class="string">'abc'</span></div><div class="line">  &#125;,</div><div class="line">  before: <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">    </div><div class="line">  &#125;</div><div class="line">&#125;).then(res =&gt; &#123;</div><div class="line">  //成功回调</div><div class="line">&#125;).catch(error =&gt; &#123;</div><div class="line">  //错误回调</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">axios.post(url , &#123;</div><div class="line">  userId: <span class="string">'111'</span></div><div class="line">&#125;,&#123;</div><div class="line">  headers: &#123;</div><div class="line">    token: <span class="string">'abc'</span></div><div class="line">  &#125;</div><div class="line">&#125;).then(res =&gt; &#123;</div><div class="line">  //成功回调</div><div class="line">&#125;).catch(error =&gt; &#123;</div><div class="line">  //错误回调</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="api请求"><a href="#api请求" class="headerlink" title="api请求"></a>api请求</h3><p>axios(config)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">axios(&#123;</div><div class="line">  url: <span class="string">''</span>,</div><div class="line">  method: <span class="string">'get'</span>,</div><div class="line">  //get请求传参用data</div><div class="line">  data: &#123;</div><div class="line">    uerId: <span class="string">'111'</span></div><div class="line">  &#125;,</div><div class="line">  //post请求传参用params</div><div class="line">  params: &#123;</div><div class="line">    uerId: <span class="string">'111'</span></div><div class="line">  &#125;,</div><div class="line">  headers: &#123;</div><div class="line">    token: <span class="string">'aaa'</span></div><div class="line">  &#125;</div><div class="line">&#125;).then(res =&gt; &#123;</div><div class="line">  //成功回调</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="执行多个并发请求"><a href="#执行多个并发请求" class="headerlink" title="执行多个并发请求"></a>执行多个并发请求</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">getUserAccount</span></span>() &#123;</div><div class="line">  <span class="built_in">return</span> axios.get(<span class="string">'/user/123456'</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">getUserPermissions</span></span>() &#123;</div><div class="line">  <span class="built_in">return</span> axios.get(<span class="string">'/user/12345/permissions'</span>);</div><div class="line">&#125;</div><div class="line">axios.all([getUserAccount(), getUserPermissions()])</div><div class="line">  .then(axios.spread(<span class="keyword">function</span> (acct, perms) &#123;</div><div class="line">    // 两个请求现在都执行完成</div><div class="line">&#125;));</div></pre></td></tr></table></figure>
<h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">// 添加请求拦截器</div><div class="line">axios.interceptors.request.use(<span class="keyword">function</span> (config) &#123;</div><div class="line">    // 在发送请求之前做些什么</div><div class="line">    <span class="built_in">return</span> config;</div><div class="line">  &#125;, <span class="keyword">function</span> (error) &#123;</div><div class="line">    // 对请求错误做些什么</div><div class="line">    <span class="built_in">return</span> Promise.reject(error);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">// 添加响应拦截器</div><div class="line">axios.interceptors.response.use(<span class="keyword">function</span> (response) &#123;</div><div class="line">    // 对响应数据做点什么</div><div class="line">    <span class="built_in">return</span> response;</div><div class="line">  &#125;, <span class="keyword">function</span> (error) &#123;</div><div class="line">    // 对响应错误做点什么</div><div class="line">    <span class="built_in">return</span> Promise.reject(error);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<h3 id="如果你想在稍后移除拦截器，可以这样："><a href="#如果你想在稍后移除拦截器，可以这样：" class="headerlink" title="如果你想在稍后移除拦截器，可以这样："></a>如果你想在稍后移除拦截器，可以这样：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var myInterceptor = axios.interceptors.request.use(<span class="function"><span class="title">function</span></span> () &#123;/*...*/&#125;);</div><div class="line">axios.interceptors.request.eject(myInterceptor);</div></pre></td></tr></table></figure>
<h3 id="可以为自定义-axios-实例添加拦截器"><a href="#可以为自定义-axios-实例添加拦截器" class="headerlink" title="可以为自定义 axios 实例添加拦截器"></a>可以为自定义 axios 实例添加拦截器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var instance = axios.create();</div><div class="line">instance.interceptors.request.use(<span class="function"><span class="title">function</span></span> () &#123;/*...*/&#125;);</div></pre></td></tr></table></figure>
<h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">axios.get(<span class="string">'/user/12345'</span>)</div><div class="line">  .catch(<span class="keyword">function</span> (error) &#123;</div><div class="line">    <span class="keyword">if</span> (error.response) &#123;</div><div class="line">      // 请求已发出，但服务器响应的状态码不在 2xx 范围内</div><div class="line">      console.log(error.response.data);</div><div class="line">      console.log(error.response.status);</div><div class="line">      console.log(error.response.headers);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      // Something happened <span class="keyword">in</span> setting up the request that triggered an Error</div><div class="line">      console.log(<span class="string">'Error'</span>, error.message);</div><div class="line">    &#125;</div><div class="line">    console.log(error.config);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<h3 id="可以使用-validateStatus-配置选项定义一个自定义-HTTP-状态码的错误范围。"><a href="#可以使用-validateStatus-配置选项定义一个自定义-HTTP-状态码的错误范围。" class="headerlink" title="可以使用 validateStatus 配置选项定义一个自定义 HTTP 状态码的错误范围。"></a>可以使用 validateStatus 配置选项定义一个自定义 HTTP 状态码的错误范围。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">axios.get(<span class="string">'/user/12345'</span>, &#123;</div><div class="line">  validateStatus: <span class="keyword">function</span> (status) &#123;</div><div class="line">    <span class="built_in">return</span> status &lt; 500; // 状态码在大于或等于500时才会 reject</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="取消"><a href="#取消" class="headerlink" title="取消"></a>取消</h2><p>使用 cancel token 取消请求<br>Axios 的 cancel token API 基于cancelable promises proposal，它还处于第一阶段。<br>可以使用 CancelToken.source 工厂方法创建 cancel token，像这样：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var CancelToken = axios.CancelToken;</div><div class="line">var <span class="built_in">source</span> = CancelToken.source();</div><div class="line"></div><div class="line">axios.get(<span class="string">'/user/12345'</span>, &#123;</div><div class="line">  cancelToken: source.token</div><div class="line">&#125;).catch(<span class="keyword">function</span>(thrown) &#123;</div><div class="line">  <span class="keyword">if</span> (axios.isCancel(thrown)) &#123;</div><div class="line">    console.log(<span class="string">'Request canceled'</span>, thrown.message);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    // 处理错误</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// 取消请求（message 参数是可选的）</div><div class="line">source.cancel(<span class="string">'Operation canceled by the user.'</span>);</div></pre></td></tr></table></figure></p>
<h3 id="还可以通过传递一个-executor-函数到-CancelToken-的构造函数来创建-cancel-token："><a href="#还可以通过传递一个-executor-函数到-CancelToken-的构造函数来创建-cancel-token：" class="headerlink" title="还可以通过传递一个 executor 函数到 CancelToken 的构造函数来创建 cancel token："></a>还可以通过传递一个 executor 函数到 CancelToken 的构造函数来创建 cancel token：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var CancelToken = axios.CancelToken;</div><div class="line">var cancel;</div><div class="line"></div><div class="line">axios.get(<span class="string">'/user/12345'</span>, &#123;</div><div class="line">  cancelToken: new CancelToken(<span class="keyword">function</span> executor(c) &#123;</div><div class="line">    // executor 函数接收一个 cancel 函数作为参数</div><div class="line">    cancel = c;</div><div class="line">  &#125;)</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// 取消请求</div><div class="line">cancel();</div></pre></td></tr></table></figure>
<p>可以使用同一个 cancel token 取消多个请求</p>
<h2 id="配置的默认值-defaults"><a href="#配置的默认值-defaults" class="headerlink" title="配置的默认值/defaults"></a>配置的默认值/defaults</h2><h3 id="全局的-axios-默认值"><a href="#全局的-axios-默认值" class="headerlink" title="全局的 axios 默认值"></a>全局的 axios 默认值</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">axios.defaults.baseURL = <span class="string">'https://api.example.com'</span>;</div><div class="line">axios.defaults.headers.common[<span class="string">'Authorization'</span>] = AUTH_TOKEN;</div><div class="line">axios.defaults.headers.post[<span class="string">'Content-Type'</span>] = <span class="string">'application/x-www-form-urlencoded'</span>;</div></pre></td></tr></table></figure>
<h3 id="自定义实例默认值"><a href="#自定义实例默认值" class="headerlink" title="自定义实例默认值"></a>自定义实例默认值</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 创建实例时设置配置的默认值</div><div class="line">var instance = axios.create(&#123;</div><div class="line">  baseURL: <span class="string">'https://api.example.com'</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">// 在实例已创建后修改默认值</div><div class="line">instance.defaults.headers.common[<span class="string">'Authorization'</span>] = AUTH_TOKEN;</div></pre></td></tr></table></figure>
<h3 id="配置的优先顺序"><a href="#配置的优先顺序" class="headerlink" title="配置的优先顺序"></a>配置的优先顺序</h3><p>配置会以一个优先顺序进行合并。这个顺序是：在 lib/defaults.js 找到的库的默认值，然后是实例的 defaults 属性，最后是请求的 config 参数。后者将优先于前者。这里是一个例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// 使用由库提供的配置的默认值来创建实例</div><div class="line">// 此时超时配置的默认值是 `0`</div><div class="line">var instance = axios.create();</div><div class="line"></div><div class="line">// 覆写库的超时默认值</div><div class="line">// 现在，在超时前，所有请求都会等待 2.5 秒</div><div class="line">instance.defaults.timeout = 2500;</div><div class="line"></div><div class="line">// 为已知需要花费很长时间的请求覆写超时设置</div><div class="line">instance.get(<span class="string">'/longRequest'</span>, &#123;</div><div class="line">  timeout: 5000</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="请求方法的别名"><a href="#请求方法的别名" class="headerlink" title="请求方法的别名"></a>请求方法的别名</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">axios.request(config)</div><div class="line">axios.get(url[, config])</div><div class="line">axios.delete(url[, config])</div><div class="line">axios.head(url[, config])</div><div class="line">axios.post(url[, data[, config]])</div><div class="line">axios.put(url[, data[, config]])</div><div class="line">axios.patch(url[, data[, config]])</div><div class="line"></div><div class="line">//并发</div><div class="line">axios.all(iterable)</div><div class="line">axios.spread(callback)</div><div class="line"></div><div class="line">//创建实例</div><div class="line">var instance = axios.create(&#123;</div><div class="line">  baseURL: <span class="string">'https://some-domain.com/api/'</span>,</div><div class="line">  timeout: 1000,</div><div class="line">  headers: &#123;<span class="string">'X-Custom-Header'</span>: <span class="string">'foobar'</span>&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">axios<span class="comment">#request(config)</span></div><div class="line">axios<span class="comment">#get(url[, config])</span></div><div class="line">axios<span class="comment">#delete(url[, config])</span></div><div class="line">axios<span class="comment">#head(url[, config])</span></div><div class="line">axios<span class="comment">#post(url[, data[, config]])</span></div><div class="line">axios<span class="comment">#put(url[, data[, config]])</span></div><div class="line">axios<span class="comment">#patch(url[, data[, config]])</span></div></pre></td></tr></table></figure>
<h2 id="请求配置"><a href="#请求配置" class="headerlink" title="请求配置"></a>请求配置</h2><p>这些是创建请求时可以用的配置选项。只有 url 是必需的。如果没有指定 method，请求将默认使用 get 方法。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  // `url` 是用于请求的服务器 URL</div><div class="line">  url: <span class="string">'/user'</span>,</div><div class="line"></div><div class="line">  // `method` 是创建请求时使用的方法</div><div class="line">  method: <span class="string">'get'</span>, // 默认是 get</div><div class="line"></div><div class="line">  // `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。</div><div class="line">  // 它可以通过设置一个 `baseURL` 便于为 axios 实例的方法传递相对 URL</div><div class="line">  baseURL: <span class="string">'https://some-domain.com/api/'</span>,</div><div class="line"></div><div class="line">  // `transformRequest` 允许在向服务器发送前，修改请求数据</div><div class="line">  // 只能用在 <span class="string">'PUT'</span>, <span class="string">'POST'</span> 和 <span class="string">'PATCH'</span> 这几个请求方法</div><div class="line">  // 后面数组中的函数必须返回一个字符串，或 ArrayBuffer，或 Stream</div><div class="line">  transformRequest: [<span class="keyword">function</span> (data) &#123;</div><div class="line">    // 对 data 进行任意转换处理</div><div class="line"></div><div class="line">    <span class="built_in">return</span> data;</div><div class="line">  &#125;],</div><div class="line"></div><div class="line">  // `transformResponse` 在传递给 <span class="keyword">then</span>/catch 前，允许修改响应数据</div><div class="line">  transformResponse: [<span class="keyword">function</span> (data) &#123;</div><div class="line">    // 对 data 进行任意转换处理</div><div class="line"></div><div class="line">    <span class="built_in">return</span> data;</div><div class="line">  &#125;],</div><div class="line"></div><div class="line">  // `headers` 是即将被发送的自定义请求头</div><div class="line">  headers: &#123;<span class="string">'X-Requested-With'</span>: <span class="string">'XMLHttpRequest'</span>&#125;,</div><div class="line"></div><div class="line">  // `params` 是即将与请求一起发送的 URL 参数</div><div class="line">  // 必须是一个无格式对象(plain object)或 URLSearchParams 对象</div><div class="line">  params: &#123;</div><div class="line">    ID: 12345</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  // `paramsSerializer` 是一个负责 `params` 序列化的函数</div><div class="line">  // (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)</div><div class="line">  paramsSerializer: <span class="keyword">function</span>(params) &#123;</div><div class="line">    <span class="built_in">return</span> Qs.stringify(params, &#123;arrayFormat: <span class="string">'brackets'</span>&#125;)</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  // `data` 是作为请求主体被发送的数据</div><div class="line">  // 只适用于这些请求方法 <span class="string">'PUT'</span>, <span class="string">'POST'</span>, 和 <span class="string">'PATCH'</span></div><div class="line">  // 在没有设置 `transformRequest` 时，必须是以下类型之一：</div><div class="line">  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</div><div class="line">  // - 浏览器专属：FormData, File, Blob</div><div class="line">  // - Node 专属： Stream</div><div class="line">  data: &#123;</div><div class="line">    firstName: <span class="string">'Fred'</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  // `timeout` 指定请求超时的毫秒数(0 表示无超时时间)</div><div class="line">  // 如果请求话费了超过 `timeout` 的时间，请求将被中断</div><div class="line">  timeout: 1000,</div><div class="line"></div><div class="line">  // `withCredentials` 表示跨域请求时是否需要使用凭证</div><div class="line">  withCredentials: <span class="literal">false</span>, // 默认的</div><div class="line"></div><div class="line">  // `adapter` 允许自定义处理请求，以使测试更轻松</div><div class="line">  // 返回一个 promise 并应用一个有效的响应 (查阅 [response docs](<span class="comment">#response-api)).</span></div><div class="line">  adapter: <span class="keyword">function</span> (config) &#123;</div><div class="line">    /* ... */</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  // `auth` 表示应该使用 HTTP 基础验证，并提供凭据</div><div class="line">  // 这将设置一个 `Authorization` 头，覆写掉现有的任意使用 `headers` 设置的自定义 `Authorization`头</div><div class="line">  auth: &#123;</div><div class="line">    username: <span class="string">'janedoe'</span>,</div><div class="line">    password: <span class="string">'s00pers3cret'</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  // `responseType` 表示服务器响应的数据类型，可以是 <span class="string">'arraybuffer'</span>, <span class="string">'blob'</span>, <span class="string">'document'</span>, <span class="string">'json'</span>, <span class="string">'text'</span>, <span class="string">'stream'</span></div><div class="line">  responseType: <span class="string">'json'</span>, // 默认的</div><div class="line"></div><div class="line">  // `xsrfCookieName` 是用作 xsrf token 的值的cookie的名称</div><div class="line">  xsrfCookieName: <span class="string">'XSRF-TOKEN'</span>, // default</div><div class="line"></div><div class="line">  // `xsrfHeaderName` 是承载 xsrf token 的值的 HTTP 头的名称</div><div class="line">  xsrfHeaderName: <span class="string">'X-XSRF-TOKEN'</span>, // 默认的</div><div class="line"></div><div class="line">  // `onUploadProgress` 允许为上传处理进度事件</div><div class="line">  onUploadProgress: <span class="keyword">function</span> (progressEvent) &#123;</div><div class="line">    // 对原生进度事件的处理</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  // `onDownloadProgress` 允许为下载处理进度事件</div><div class="line">  onDownloadProgress: <span class="keyword">function</span> (progressEvent) &#123;</div><div class="line">    // 对原生进度事件的处理</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  // `maxContentLength` 定义允许的响应内容的最大尺寸</div><div class="line">  maxContentLength: 2000,</div><div class="line"></div><div class="line">  // `validateStatus` 定义对于给定的HTTP 响应状态码是 resolve 或 reject  promise 。如果 `validateStatus` 返回 `<span class="literal">true</span>` (或者设置为 `null` 或 `undefined`)，promise 将被 resolve; 否则，promise 将被 rejecte</div><div class="line">  validateStatus: <span class="keyword">function</span> (status) &#123;</div><div class="line">    <span class="built_in">return</span> status &gt;= 200 &amp;&amp; status &lt; 300; // 默认的</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  // `maxRedirects` 定义在 node.js 中 follow 的最大重定向数目</div><div class="line">  // 如果设置为0，将不会 follow 任何重定向</div><div class="line">  maxRedirects: 5, // 默认的</div><div class="line"></div><div class="line">  // `httpAgent` 和 `httpsAgent` 分别在 node.js 中用于定义在执行 http 和 https 时使用的自定义代理。允许像这样配置选项：</div><div class="line">  // `keepAlive` 默认没有启用</div><div class="line">  httpAgent: new http.Agent(&#123; keepAlive: <span class="literal">true</span> &#125;),</div><div class="line">  httpsAgent: new https.Agent(&#123; keepAlive: <span class="literal">true</span> &#125;),</div><div class="line"></div><div class="line">  // <span class="string">'proxy'</span> 定义代理服务器的主机名称和端口</div><div class="line">  // `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据</div><div class="line">  // 这将会设置一个 `Proxy-Authorization` 头，覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。</div><div class="line">  proxy: &#123;</div><div class="line">    host: <span class="string">'127.0.0.1'</span>,</div><div class="line">    port: 9000,</div><div class="line">    auth: : &#123;</div><div class="line">      username: <span class="string">'mikeymike'</span>,</div><div class="line">      password: <span class="string">'rapunz3l'</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  // `cancelToken` 指定用于取消请求的 cancel token</div><div class="line">  // （查看后面的 Cancellation 这节了解更多）</div><div class="line">  cancelToken: new CancelToken(<span class="keyword">function</span> (cancel) &#123;</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="响应结构"><a href="#响应结构" class="headerlink" title="响应结构"></a>响应结构</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  // `data` 由服务器提供的响应</div><div class="line">  data: &#123;&#125;,</div><div class="line"></div><div class="line">  // `status` 来自服务器响应的 HTTP 状态码</div><div class="line">  status: 200,</div><div class="line"></div><div class="line">  // `statusText` 来自服务器响应的 HTTP 状态信息</div><div class="line">  statusText: <span class="string">'OK'</span>,</div><div class="line"></div><div class="line">  // `headers` 服务器响应的头</div><div class="line">  headers: &#123;&#125;,</div><div class="line"></div><div class="line">  // `config` 是为请求提供的配置信息</div><div class="line">  config: &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用 then 时，你将接收下面这样的响应：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">axios.get(<span class="string">'/user/12345'</span>)</div><div class="line">  .then(<span class="keyword">function</span>(response) &#123;</div><div class="line">    console.log(response.data);</div><div class="line">    console.log(response.status);</div><div class="line">    console.log(response.statusText);</div><div class="line">    console.log(response.headers);</div><div class="line">    console.log(response.config);</div><div class="line">  &#125;);</div><div class="line">在使用 catch 时，或传递 rejection callback 作为 <span class="keyword">then</span> 的第二个参数时，响应可以通过 error 对象可被使用。</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;axios 中文文档地址：&lt;a href=&quot;https://www.kancloud.cn/yunye/axios/234845&quot; target=&quot;_blank&quot;&gt;https://www.kancloud.cn/yunye/axios/234845&lt;/a&gt;&lt;br&gt;cdn:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;https://unpkg.com/axios/dist/axios.min.js&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="axios" scheme="http://zengdh.com/tags/axios/"/>
    
  </entry>
  
  <entry>
    <title>VUE（三.vue-resource）</title>
    <link href="http://zengdh.com/2017/12/06/note16/"/>
    <id>http://zengdh.com/2017/12/06/note16/</id>
    <published>2017-12-06T05:50:00.240Z</published>
    <updated>2017-12-06T10:48:06.461Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vue-resource"><a href="#vue-resource" class="headerlink" title="vue-resource"></a>vue-resource</h2><h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Vue.http.options.root = <span class="string">'/root'</span>;</div></pre></td></tr></table></figure>
<h3 id="组件实例配置"><a href="#组件实例配置" class="headerlink" title="组件实例配置"></a>组件实例配置</h3><p>在实例化组件时可以传入http选项来进行配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">new Vue(&#123;</div><div class="line">    http: &#123;</div><div class="line">        root: <span class="string">'/root'</span>,</div><div class="line">        headers: &#123;</div><div class="line">            Authorization: <span class="string">''</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="全局调用"><a href="#全局调用" class="headerlink" title="全局调用"></a>全局调用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Vue.http(option);</div></pre></td></tr></table></figure>
<h3 id="组件实例调用"><a href="#组件实例调用" class="headerlink" title="组件实例调用"></a>组件实例调用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">this.<span class="variable">$http</span>(option)</div></pre></td></tr></table></figure>
<h3 id="vue-resource-提供的便捷方法"><a href="#vue-resource-提供的便捷方法" class="headerlink" title="vue-resource 提供的便捷方法"></a>vue-resource 提供的便捷方法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">get(url, [data], [options]);</div><div class="line"></div><div class="line">post(url, [data], [options]);</div><div class="line"></div><div class="line">put(url, [data], [options]);</div><div class="line"></div><div class="line">patch(url, [data], [options]);</div><div class="line"></div><div class="line">delete(url, [data], [options]);</div><div class="line"></div><div class="line">jsonp(url, [data], [options]);</div></pre></td></tr></table></figure>
<h3 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">this.<span class="variable">$http</span>.get(url, &#123;</div><div class="line">  params: &#123;</div><div class="line">    userId: <span class="string">'11'</span></div><div class="line">  &#125;,</div><div class="line">  headers: &#123;</div><div class="line">    token: <span class="string">'aaa'</span></div><div class="line">  &#125;</div><div class="line">&#125;).then(res =&gt; &#123;</div><div class="line">  //成功回调</div><div class="line">&#125;,error =&gt; &#123;</div><div class="line">  //失败回调</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">this.<span class="variable">$http</span>.post(url, &#123;</div><div class="line">  userId: <span class="string">'111'</span></div><div class="line">&#125;,&#123;</div><div class="line">  headers: &#123;</div><div class="line">    token: <span class="string">'aaa'</span></div><div class="line">  &#125;</div><div class="line">&#125;).then(res =&gt; &#123;</div><div class="line">   //成功回调</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="jsonp请求"><a href="#jsonp请求" class="headerlink" title="jsonp请求"></a>jsonp请求</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">this.<span class="variable">$http</span>.jsonp(url, &#123;</div><div class="line">  userId: <span class="string">'111'</span></div><div class="line">&#125;).then(res =&gt; &#123;</div><div class="line">   //成功回调</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="api请求"><a href="#api请求" class="headerlink" title="api请求"></a>api请求</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">this.<span class="variable">$http</span>(&#123;</div><div class="line">  url: <span class="string">''</span>,</div><div class="line">  method: <span class="string">'GET'</span>,</div><div class="line">  params: &#123;</div><div class="line">    userId: <span class="string">'111'</span></div><div class="line">  &#125;,</div><div class="line">  headers: &#123;</div><div class="line">    token: <span class="string">'aaa'</span></div><div class="line">  &#125;,</div><div class="line">  timeout: 50,</div><div class="line">  before: <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">    </div><div class="line">  &#125;</div><div class="line">&#125;).then(<span class="keyword">function</span> (res) &#123;</div><div class="line">  //成功回调</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><h3 id="拦截器的注册"><a href="#拦截器的注册" class="headerlink" title="拦截器的注册"></a>拦截器的注册</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Vue.http.interceptors.push(&#123;</div><div class="line">    request: <span class="keyword">function</span> ( request ) &#123;</div><div class="line">        // 更改请求类型为POST</div><div class="line">        request.method = <span class="string">'POST'</span>;</div><div class="line">        <span class="built_in">return</span> request;</div><div class="line">    &#125;,</div><div class="line">    response: <span class="keyword">function</span> ( response ) &#123;</div><div class="line">        // 修改返回数据</div><div class="line">        response.data = [&#123;</div><div class="line">            custom: <span class="string">'custom'</span></div><div class="line">        &#125;];</div><div class="line">        <span class="built_in">return</span> response;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="工厂函数注册"><a href="#工厂函数注册" class="headerlink" title="工厂函数注册"></a>工厂函数注册</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">Vue.http.interceptors.push(<span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">    <span class="built_in">return</span> &#123;</div><div class="line">        request: <span class="keyword">function</span> ( request ) &#123;</div><div class="line">            <span class="built_in">return</span> request;</div><div class="line">        &#125;,</div><div class="line">        response: <span class="keyword">function</span> ( response ) &#123;</div><div class="line">            <span class="built_in">return</span> response;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">Vue.http.interceptors.push(<span class="keyword">function</span> ( request, next ) &#123;</div><div class="line">    // 请求发送前的处理逻辑</div><div class="line">    next(<span class="function"><span class="title">function</span></span> () &#123;    </div><div class="line">        // 请求发送后的处理逻辑</div><div class="line">        // 更具请求的状态， response参数会返回给 successCallback或errorCallback</div><div class="line">        <span class="built_in">return</span> response</div><div class="line">    &#125;);    </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="实现的功能："><a href="#实现的功能：" class="headerlink" title="实现的功能："></a>实现的功能：</h3><p>AJAX请求的loading界面<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Vue.http.interceptors.push((request, next) =&gt; &#123;</div><div class="line">    // 通过控制 组件的<span class="string">'v-show'</span>值显示loading组件</div><div class="line">    loading.show = <span class="literal">true</span>;</div><div class="line">    next((response) =&gt; &#123;</div><div class="line">        loading.show = <span class="literal">false</span></div><div class="line">        <span class="built_in">return</span> response</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="请求选项对象"><a href="#请求选项对象" class="headerlink" title="请求选项对象"></a>请求选项对象</h2><table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>url</td>
<td>string</td>
<td>请求的URL</td>
</tr>
<tr>
<td>method</td>
<td>string</td>
<td>请求的HTTP方法，例如：’GET’, ‘POST’或其他HTTP方法</td>
</tr>
<tr>
<td>body</td>
<td>Object,FormDatastring</td>
<td>request body</td>
</tr>
<tr>
<td>params</td>
<td>Object</td>
<td>请求的URL参数对象</td>
</tr>
<tr>
<td>headers</td>
<td>Object</td>
<td>request header</td>
</tr>
<tr>
<td>timeout</td>
<td>number</td>
<td>单位为毫秒的请求超时时间 (0 表示无超时时间)</td>
</tr>
<tr>
<td>before</td>
<td>function(request)</td>
<td>请求发送前的处理函数，类似于jQuery的beforeSend函数</td>
</tr>
<tr>
<td>progress</td>
<td>function(event)</td>
<td>ProgressEvent回调处理函数</td>
</tr>
<tr>
<td>credentials</td>
<td>boolean</td>
<td>表示跨域请求时是否需要使用凭证</td>
</tr>
<tr>
<td>emulateHTTP</td>
<td>boolean</td>
<td>发送PUT, PATCH, DELETE请求时以HTTP</td>
</tr>
<tr>
<td>emulateJSON</td>
<td>boolean</td>
<td>将request body以application/x-www-form-urlencoded content type发送</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;vue-resource&quot;&gt;&lt;a href=&quot;#vue-resource&quot; class=&quot;headerlink&quot; title=&quot;vue-resource&quot;&gt;&lt;/a&gt;vue-resource&lt;/h2&gt;&lt;h3 id=&quot;全局配置&quot;&gt;&lt;a href=&quot;#全局配置&quot; class=&quot;headerlink&quot; title=&quot;全局配置&quot;&gt;&lt;/a&gt;全局配置&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Vue.http.options.root = &lt;span class=&quot;string&quot;&gt;&#39;/root&#39;&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;组件实例配置&quot;&gt;&lt;a href=&quot;#组件实例配置&quot; class=&quot;headerlink&quot; title=&quot;组件实例配置&quot;&gt;&lt;/a&gt;组件实例配置&lt;/h3&gt;&lt;p&gt;在实例化组件时可以传入http选项来进行配置&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;new Vue(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    http: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        root: &lt;span class=&quot;string&quot;&gt;&#39;/root&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        headers: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            Authorization: &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue-resource" scheme="http://zengdh.com/tags/vue-resource/"/>
    
  </entry>
  
  <entry>
    <title>VUE（二.vue-router 路由配置）</title>
    <link href="http://zengdh.com/2017/11/30/note15/"/>
    <id>http://zengdh.com/2017/11/30/note15/</id>
    <published>2017-11-30T06:13:43.841Z</published>
    <updated>2017-11-30T09:54:52.006Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">import Vue from <span class="string">'vue'</span></div><div class="line">import Router from <span class="string">'vue-router'</span></div><div class="line">import HelloWorld from <span class="string">'@/components/HelloWorld'</span></div><div class="line"></div><div class="line">Vue.use(Router)</div><div class="line"></div><div class="line"><span class="built_in">export</span> default new Router(&#123;</div><div class="line">  routes: [</div><div class="line">    &#123;</div><div class="line">      path: <span class="string">'/'</span>,</div><div class="line">      name: <span class="string">'HelloWorld'</span>,</div><div class="line">      component: HelloWorld</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> default new Router(&#123;</div><div class="line">  routes: [</div><div class="line">    &#123;</div><div class="line">      path: <span class="string">'/test/:testId'</span>,//单个动态参数</div><div class="line">      //path: <span class="string">'/test/:testId/user/:name'</span>,多个动态参数</div><div class="line">      name: <span class="string">'HelloWorld'</span>,</div><div class="line">      component: HelloWorld</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>通过可以获取当前页面动态参数的值</p>
<h3 id="router-link映射路由"><a href="#router-link映射路由" class="headerlink" title="router-link映射路由"></a>router-link映射路由</h3><p>方式一：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;router-link to=<span class="string">"/test/1111"</span>&gt;跳转&lt;/router-link&gt;//直接传入参数值拼接url</div><div class="line">//如果有多个动态参数</div><div class="line">&lt;router-link to=<span class="string">"/test/1111/user/2222"</span>&gt;跳转&lt;/router-link&gt;</div></pre></td></tr></table></figure></p>
<p>方式二：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;router-link  v-bind:to=<span class="string">"&#123; name:'HelloWorld', params: &#123;testId: 555&#125; &#125;"</span>&gt;跳转&lt;/router-link&gt;//name为指定页面的name值，params中为动态参数需要的参数和值</div><div class="line">//如果有多个动态参数</div><div class="line">&lt;router-link  v-bind:to=<span class="string">"&#123; name:'HelloWorld', params: &#123;testId: 555, userId: 333&#125; &#125;"</span>&gt;</div></pre></td></tr></table></figure></p>
<h3 id="url显示形式"><a href="#url显示形式" class="headerlink" title="url显示形式"></a>url显示形式</h3><p>默认的url打开在端口号后面会跟一个#，例如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost:8080/<span class="comment">#/test/123</span></div></pre></td></tr></table></figure></p>
<p>这是默认的hash写法，如果要替换成传统写法，需要在router中，修改mode的值<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">import Vue from <span class="string">'vue'</span></div><div class="line">import Router from <span class="string">'vue-router'</span></div><div class="line">import HelloWorld from <span class="string">'@/components/HelloWorld'</span></div><div class="line"></div><div class="line">Vue.use(Router)</div><div class="line"></div><div class="line"><span class="built_in">export</span> default new Router(&#123;</div><div class="line">  mode: <span class="string">'history'</span>,//传统写法</div><div class="line">  //mode: <span class="string">'hash'</span>,//<span class="built_in">hash</span>写法，默认</div><div class="line">  routes: [</div><div class="line">    &#123;</div><div class="line">      path: <span class="string">'/'</span>,</div><div class="line">      name: <span class="string">'HelloWorld'</span>,</div><div class="line">      component: HelloWorld</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h2 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h2><p>首页在父级页面添加<router-view>，用来渲染通过路由映射过来的组件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div class=<span class="string">"hello"</span>&gt;</div><div class="line">    父级页面</div><div class="line">    &lt;router-view/&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure></router-view></p>
<p>修改路由配置，用children去嵌套子路由<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">import Vue from <span class="string">'vue'</span></div><div class="line">import Router from <span class="string">'vue-router'</span></div><div class="line">import HelloWorld from <span class="string">'@/components/HelloWorld'</span></div><div class="line">import Test1 from <span class="string">'@/page/test1'</span></div><div class="line">import Test2 from <span class="string">'@/page/test2'</span></div><div class="line"></div><div class="line">Vue.use(Router)</div><div class="line"><span class="built_in">export</span> default new Router(&#123;</div><div class="line">  mode: <span class="string">'history'</span>,</div><div class="line">  routes: [</div><div class="line">    &#123;</div><div class="line">      path: <span class="string">'/test'</span>,</div><div class="line">      name: <span class="string">'HelloWorld'</span>,</div><div class="line">      component: HelloWorld,</div><div class="line">      children: [</div><div class="line">        &#123;</div><div class="line">          path: <span class="string">'test1'</span>,</div><div class="line">          name: <span class="string">'test1'</span>,</div><div class="line">          component: Test1</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          path: <span class="string">'test2'</span>,</div><div class="line">          name: <span class="string">'test2'</span>,</div><div class="line">          component: Test2</div><div class="line">        &#125;</div><div class="line">      ]</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>在配置的路由后面，添加 children，并在 children 中添加二级路由，就能实现路由嵌套<br>配置 path 的时候，以 “ / “ 开头的嵌套路径会被当作根路径，所以子路由的 path 不需要添加 “ / “<br>父页面中添加<router-link>映射路由<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div class=<span class="string">"hello"</span>&gt;</div><div class="line">    父级页面</div><div class="line">    &lt;router-link to=<span class="string">"/test/test1"</span>&gt;测试一&lt;/router-link&gt;</div><div class="line">    &lt;router-link to=<span class="string">"/test/test2"</span>&gt;测试二&lt;/router-link&gt;</div><div class="line">    &lt;router-view/&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure></router-link></p>
<h3 id="query参数传递"><a href="#query参数传递" class="headerlink" title="query参数传递"></a>query参数传递</h3><p>router-link映射路由<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//方式一：</div><div class="line">&lt;router-link to=<span class="string">"/test/test1?name=zdh"</span>&gt;跳转&lt;/router-link&gt;</div><div class="line">//方式二：</div><div class="line">&lt;router-link v-bind:to=<span class="string">"&#123;path: '/test/test1', query: &#123; name: 'zdh' &#125;&#125;"</span>&gt;跳转&lt;/router-link&gt;</div></pre></td></tr></table></figure></p>
<p>获取当前页面的参数传值<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123; <span class="variable">$route</span>.query.name &#125;&#125;</div></pre></td></tr></table></figure></p>
<h3 id="params参数传递"><a href="#params参数传递" class="headerlink" title="params参数传递"></a>params参数传递</h3><p>用params传值需要动态路由配置，上面已经提到过动态路由的配置了，params传值有两种方式，一种是显示在url上，一种是不显示在url上</p>
<h4 id="显示在url上"><a href="#显示在url上" class="headerlink" title="显示在url上"></a>显示在url上</h4><p>路由配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> default new Router(&#123;</div><div class="line">  mode: <span class="string">'history'</span>,</div><div class="line">  routes: [</div><div class="line">    &#123;</div><div class="line">      path: <span class="string">'/test'</span>,</div><div class="line">      name: <span class="string">'HelloWorld'</span>,</div><div class="line">      component: HelloWorld,</div><div class="line">      children: [</div><div class="line">        &#123;</div><div class="line">          path: <span class="string">'test1/:num'</span>,//写上需要传参的值</div><div class="line">          name: <span class="string">'test1'</span>,</div><div class="line">          component: Test1</div><div class="line">        &#125;</div><div class="line">      ]</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>这样在view层用vue-link映射时，都会在url上显示传参的值</p>
<h4 id="不显示在url上"><a href="#不显示在url上" class="headerlink" title="不显示在url上"></a>不显示在url上</h4><p>路由配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> default new Router(&#123;</div><div class="line">  mode: <span class="string">'history'</span>,</div><div class="line">  routes: [</div><div class="line">    &#123;</div><div class="line">      path: <span class="string">'/test'</span>,</div><div class="line">      name: <span class="string">'HelloWorld'</span>,</div><div class="line">      component: HelloWorld,</div><div class="line">      children: [</div><div class="line">        &#123;</div><div class="line">          path: <span class="string">'test1/'</span>,//需要传参的值不填写</div><div class="line">          name: <span class="string">'test1'</span>,</div><div class="line">          component: Test1</div><div class="line">        &#125;</div><div class="line">      ]</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>vue-link映射<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;router-link v-bind:to=<span class="string">"&#123; name:'test1', params: &#123;num: 888&#125; &#125;"</span>&gt;跳转&lt;/router-link&gt;</div></pre></td></tr></table></figure></p>
<p>总结：query是页面url之间的参数传递，params是路由之间的参数传递</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本配置&quot;&gt;&lt;a href=&quot;#基本配置&quot; class=&quot;headerlink&quot; title=&quot;基本配置&quot;&gt;&lt;/a&gt;基本配置&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;import Vue from &lt;span class=&quot;string&quot;&gt;&#39;vue&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;import Router from &lt;span class=&quot;string&quot;&gt;&#39;vue-router&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;import HelloWorld from &lt;span class=&quot;string&quot;&gt;&#39;@/components/HelloWorld&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Vue.use(Router)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt; default new Router(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  routes: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      path: &lt;span class=&quot;string&quot;&gt;&#39;/&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      name: &lt;span class=&quot;string&quot;&gt;&#39;HelloWorld&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      component: HelloWorld&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="vue.js" scheme="http://zengdh.com/tags/vue-js/"/>
    
      <category term="vue-router" scheme="http://zengdh.com/tags/vue-router/"/>
    
  </entry>
  
  <entry>
    <title>VUE（一.通过vue-cli搭建项目）</title>
    <link href="http://zengdh.com/2017/11/30/note14/"/>
    <id>http://zengdh.com/2017/11/30/note14/</id>
    <published>2017-11-30T03:28:50.555Z</published>
    <updated>2017-11-30T05:49:10.801Z</updated>
    
    <content type="html"><![CDATA[<p>通过vue-cli脚手架搭建项目，vue-cli的github地址：<a href="https://github.com/vuejs/vue-cli" target="_blank">https://github.com/vuejs/vue-cli</a></p>
<h2 id="安装node环境"><a href="#安装node环境" class="headerlink" title="安装node环境"></a>安装node环境</h2><p>node官网<a href="http://nodejs.cn/" target="_blank">http://nodejs.cn/</a>，安装完成后可以通过node -v和npm -v查看版本</p>
<a id="more"></a>
<h2 id="安装vue-cli"><a href="#安装vue-cli" class="headerlink" title="安装vue-cli"></a>安装vue-cli</h2><p>镜像安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure></p>
<p>npm缓存清理指令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm cache clean</div></pre></td></tr></table></figure></p>
<p>vue-cli全局安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm install -g vue-cli</div></pre></td></tr></table></figure></p>
<h2 id="项目生成"><a href="#项目生成" class="headerlink" title="项目生成"></a>项目生成</h2><p>生成指令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">vue init webpack vue-test</div><div class="line">//或者 vue init webpack-simple vue-test</div></pre></td></tr></table></figure></p>
<p>除了webpack模板还有其他的，详情<a href="https://github.com/vuejs-templates" target="_blank">https://github.com/vuejs-templates</a><br><img src="/img/vue1.png"></p>
<h2 id="项目启动与打包"><a href="#项目启动与打包" class="headerlink" title="项目启动与打包"></a>项目启动与打包</h2><p>安装node_modules<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm install</div></pre></td></tr></table></figure></p>
<p>启动指令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm run dev</div></pre></td></tr></table></figure></p>
<p>打包指令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm run build</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过vue-cli脚手架搭建项目，vue-cli的github地址：&lt;a href=&quot;https://github.com/vuejs/vue-cli&quot; target=&quot;_blank&quot;&gt;https://github.com/vuejs/vue-cli&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装node环境&quot;&gt;&lt;a href=&quot;#安装node环境&quot; class=&quot;headerlink&quot; title=&quot;安装node环境&quot;&gt;&lt;/a&gt;安装node环境&lt;/h2&gt;&lt;p&gt;node官网&lt;a href=&quot;http://nodejs.cn/&quot; target=&quot;_blank&quot;&gt;http://nodejs.cn/&lt;/a&gt;，安装完成后可以通过node -v和npm -v查看版本&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue.js" scheme="http://zengdh.com/tags/vue-js/"/>
    
      <category term="webpack" scheme="http://zengdh.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Node.js 路由配置及模板引入</title>
    <link href="http://zengdh.com/2017/11/14/note13/"/>
    <id>http://zengdh.com/2017/11/14/note13/</id>
    <published>2017-11-14T03:32:24.446Z</published>
    <updated>2017-11-14T08:16:05.892Z</updated>
    
    <content type="html"><![CDATA[<p>node.js的一些基本路由配置，以及前端模板引擎引入，多接口请求并发及服务端渲染数据，跨域请求转发等..</p>
<h2 id="express框架及nunjucks模板引入"><a href="#express框架及nunjucks模板引入" class="headerlink" title="express框架及nunjucks模板引入"></a>express框架及nunjucks模板引入</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var express = require(<span class="string">'express'</span>);</div><div class="line">var nunjucks = require(<span class="string">'nunjucks'</span>);</div><div class="line"></div><div class="line">var app = express();</div><div class="line">nunjucks.configure(<span class="string">'views'</span>, &#123;</div><div class="line">    autoescape: <span class="literal">true</span>,</div><div class="line">    express: app,</div><div class="line">    watch:<span class="literal">true</span>,</div><div class="line">    noCache: <span class="literal">true</span></div><div class="line">&#125;);</div><div class="line">// view engine setup</div><div class="line">app.set(<span class="string">'views'</span>, path.join(__dirname, <span class="string">'views'</span>));</div><div class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'html'</span>);</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="路由配置routers-js"><a href="#路由配置routers-js" class="headerlink" title="路由配置routers.js"></a>路由配置routers.js</h2><p>第一种写法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var express = require(<span class="string">'express'</span>);</div><div class="line">var router = express.Router();</div><div class="line"></div><div class="line">router.get(<span class="string">'/'</span>, <span class="keyword">function</span>(req, res, next) &#123;</div><div class="line">    res.render(<span class="string">'页面地址'</span>, &#123; title: <span class="string">''</span>&#125;);</div><div class="line">&#125;);</div><div class="line">module.exports = router;</div></pre></td></tr></table></figure></p>
<p>第二种写法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">module.exports = <span class="keyword">function</span>(app) &#123;</div><div class="line">  app.get(<span class="string">'自定义路由地址'</span>, <span class="keyword">function</span> (req, res) &#123;</div><div class="line">    res.render(<span class="string">'页面地址'</span>, &#123; title: <span class="string">''</span>&#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="服务端接口请求"><a href="#服务端接口请求" class="headerlink" title="服务端接口请求"></a>服务端接口请求</h2><p>单条接口请求<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var express = require(<span class="string">'express'</span>);</div><div class="line">var router = express.Router();</div><div class="line">var request = require(<span class="string">'request'</span>);</div><div class="line"></div><div class="line">router.get(<span class="string">'/'</span>, <span class="keyword">function</span>(req,res,next) &#123;</div><div class="line">   request(&#123;url: <span class="string">''</span>,gzip:<span class="literal">true</span>,headers:&#123;<span class="string">'User-Agent'</span>: <span class="string">'chrome'</span>&#125;&#125;,<span class="keyword">function</span>(error, response, body) &#123;</div><div class="line">      var data =  JSON.parse(body);//数据处理</div><div class="line">      res.render(<span class="string">'页面地址'</span>, &#123; data: data&#125;);</div><div class="line">  &#125;&#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>多条接口并发请求<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var request = require(<span class="string">'request-promise'</span>);</div><div class="line">var obj = <span class="keyword">function</span>(app) &#123;</div><div class="line">  app.get(<span class="string">'路由地址'</span>, <span class="keyword">function</span> (req, res) &#123;</div><div class="line">    var api1 = request(&#123;url:<span class="string">'接口地址'</span>,gzip:<span class="literal">true</span>,headers:&#123;<span class="string">'User-Agent'</span>: <span class="string">'chrome'</span>&#125;&#125;);</div><div class="line">    var api2 = request(&#123;url:<span class="string">'接口地址'</span>,gzip:<span class="literal">true</span>,headers:&#123;<span class="string">'User-Agent'</span>: <span class="string">'chrome'</span>&#125;&#125;);</div><div class="line">    Promise.all([api1,api2]).then(<span class="keyword">function</span>(results) &#123;</div><div class="line">        var data1 = JSON.parse(results[0]).result.obj;</div><div class="line">        var data2 = JSON.parse(results[1]).result.obj;</div><div class="line">        res.render(<span class="string">'页面地址'</span>, &#123; title: <span class="string">''</span>, data1: data1, data2: data2&#125;);</div><div class="line">    &#125;).catch(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">      </div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line">module.exports = obj;</div></pre></td></tr></table></figure></p>
<h2 id="app-js-引入路由配置"><a href="#app-js-引入路由配置" class="headerlink" title="app.js 引入路由配置"></a>app.js 引入路由配置</h2><p>第一种：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var obj = require(<span class="string">'router文件夹下的单个路由配置文件'</span>);</div><div class="line">var app = express();</div><div class="line">app.use(<span class="string">'自定义路由地址'</span>, obj);</div></pre></td></tr></table></figure></p>
<p>第二种：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var obj = require(<span class="string">'router文件夹下的单个路由配置文件'</span>);</div><div class="line">var app = express();</div><div class="line">obj(app);</div></pre></td></tr></table></figure></p>
<h2 id="错误路由指向"><a href="#错误路由指向" class="headerlink" title="错误路由指向"></a>错误路由指向</h2><p>当页面发生404、500等错误时，路由配置指向<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">app.use(<span class="keyword">function</span>(err, req, res, next) &#123;</div><div class="line">  //<span class="built_in">set</span> locals, only providing error <span class="keyword">in</span> development</div><div class="line">  //res.locals.message = err.message;</div><div class="line">  //res.locals.error = req.app.get(<span class="string">'env'</span>) === <span class="string">'development'</span> ? err:err;</div><div class="line"></div><div class="line">  // render the error page</div><div class="line">  res.status(err.status);//http错误状态码</div><div class="line">  res.render(<span class="string">'error页面地址'</span>,&#123;error:err&#125;);//根据错误状态码渲染不同模板数据</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;node.js的一些基本路由配置，以及前端模板引擎引入，多接口请求并发及服务端渲染数据，跨域请求转发等..&lt;/p&gt;
&lt;h2 id=&quot;express框架及nunjucks模板引入&quot;&gt;&lt;a href=&quot;#express框架及nunjucks模板引入&quot; class=&quot;headerlink&quot; title=&quot;express框架及nunjucks模板引入&quot;&gt;&lt;/a&gt;express框架及nunjucks模板引入&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var express = require(&lt;span class=&quot;string&quot;&gt;&#39;express&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var nunjucks = require(&lt;span class=&quot;string&quot;&gt;&#39;nunjucks&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var app = express();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;nunjucks.configure(&lt;span class=&quot;string&quot;&gt;&#39;views&#39;&lt;/span&gt;, &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    autoescape: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    express: app,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    watch:&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    noCache: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// view engine setup&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;app.set(&lt;span class=&quot;string&quot;&gt;&#39;views&#39;&lt;/span&gt;, path.join(__dirname, &lt;span class=&quot;string&quot;&gt;&#39;views&#39;&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;app.set(&lt;span class=&quot;string&quot;&gt;&#39;view engine&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;html&#39;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="express" scheme="http://zengdh.com/tags/express/"/>
    
      <category term="node.js" scheme="http://zengdh.com/tags/node-js/"/>
    
      <category term="nunjucks" scheme="http://zengdh.com/tags/nunjucks/"/>
    
      <category term="request-promise" scheme="http://zengdh.com/tags/request-promise/"/>
    
  </entry>
  
  <entry>
    <title>css预编译工具-sass</title>
    <link href="http://zengdh.com/2017/10/23/note12/"/>
    <id>http://zengdh.com/2017/10/23/note12/</id>
    <published>2017-10-23T03:20:19.094Z</published>
    <updated>2017-12-13T06:07:22.423Z</updated>
    
    <content type="html"><![CDATA[<p>sass官方地址：<a href="https://www.sass.hk/" target="_blank">https://www.sass.hk/</a></p>
<a id="more"></a>
<h2 id="常用mixin"><a href="#常用mixin" class="headerlink" title="常用mixin"></a>常用mixin</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line">@mixin font-dpr(<span class="variable">$font</span>-size) &#123;</div><div class="line">  font-size: <span class="variable">$font</span>-size;</div><div class="line">  [data-dpr=<span class="string">"2"</span>] &amp; &#123;</div><div class="line">    font-size: <span class="variable">$font</span>-size * 2;</div><div class="line">  &#125;</div><div class="line">  [data-dpr=<span class="string">"3"</span>] &amp; &#123;</div><div class="line">    font-size: <span class="variable">$font</span>-size * 3;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="variable">$baseFontSize</span>: 100;</div><div class="line"><span class="variable">$FontSize</span>: 16;</div><div class="line">@mixin px2rem(<span class="variable">$name</span>, <span class="variable">$px1</span>)&#123;</div><div class="line">  <span class="comment">#&#123;$name&#125;: ($px1 / $baseFontSize) * 1rem;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">@mixin <span class="built_in">bg</span>-image(<span class="variable">$url</span>,<span class="variable">$type</span>) &#123;</div><div class="line">  background-image: url(<span class="variable">$url</span> + <span class="string">"@2x."</span>+<span class="variable">$type</span>);</div><div class="line">  @media (-webkit-min-device-pixel-ratio: 3), (min-device-pixel-ratio: 3) &#123;</div><div class="line">    background-image: url(<span class="variable">$url</span> + <span class="string">"@3x."</span>+<span class="variable">$type</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@mixin <span class="function"><span class="title">clearfix</span></span>() &#123;</div><div class="line">    &amp;:before,</div><div class="line">    &amp;:after &#123;</div><div class="line">        content: <span class="string">""</span>;</div><div class="line">        display: table;</div><div class="line">    &#125;</div><div class="line">    &amp;:after &#123;</div><div class="line">        clear: both;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@mixin remCalc(<span class="variable">$props</span>,<span class="variable">$sizes</span>,<span class="variable">$base</span>:<span class="variable">$baseFontSize</span>)&#123;</div><div class="line"> <span class="variable">$values</span>: ();</div><div class="line"> <span class="variable">$sublists</span>: <span class="literal">false</span>;</div><div class="line">  @each <span class="variable">$s</span> <span class="keyword">in</span> <span class="variable">$sizes</span> &#123;</div><div class="line">     @<span class="keyword">if</span> <span class="built_in">type</span>-of(<span class="variable">$s</span>) == list &#123;</div><div class="line">       <span class="variable">$sublists</span>: <span class="literal">true</span>; <span class="variable">$vv</span>: ();</div><div class="line">        @each <span class="variable">$ss</span> <span class="keyword">in</span> <span class="variable">$s</span> &#123;</div><div class="line">           <span class="variable">$vv</span>: append(<span class="variable">$vv</span>,<span class="keyword">if</span>(<span class="built_in">type</span>-of(<span class="variable">$ss</span>) == number, <span class="comment">#&#123;$ss / $base&#125;rem, $ss));</span></div><div class="line">         &#125;</div><div class="line">         <span class="variable">$values</span>: append(<span class="variable">$values</span>,join((), <span class="variable">$vv</span>));</div><div class="line">       &#125; @<span class="keyword">else</span> &#123;</div><div class="line">          <span class="variable">$values</span>: append(<span class="variable">$values</span>,<span class="keyword">if</span>(<span class="built_in">type</span>-of(<span class="variable">$s</span>) == number, <span class="comment">#&#123;$s / $base&#125;rem, $s));</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">  <span class="variable">$value</span>: join((), <span class="variable">$values</span>, <span class="keyword">if</span>(<span class="variable">$sublists</span>,comma,space));</div><div class="line">  @each <span class="variable">$prop</span> <span class="keyword">in</span> <span class="variable">$props</span> &#123;<span class="comment">#&#123;$prop&#125;: $value&#125;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">@mixin css3(<span class="variable">$property</span>, <span class="variable">$value</span>) &#123;</div><div class="line">    @each <span class="variable">$prefix</span> <span class="keyword">in</span> -webkit-,</div><div class="line">    -moz-,</div><div class="line">    -ms-,</div><div class="line">    -o-,</div><div class="line">    <span class="string">''</span> &#123;</div><div class="line">        <span class="comment">#&#123;$prefix&#125;#&#123;$property&#125;: ($value / $baseFontSize) * 1rem;</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@mixin css3fn(<span class="variable">$property</span>, <span class="variable">$value</span>) &#123;</div><div class="line">    @each <span class="variable">$prefix</span> <span class="keyword">in</span> -webkit-,</div><div class="line">    -moz-,</div><div class="line">    -ms-,</div><div class="line">    -o-,</div><div class="line">    <span class="string">''</span> &#123;</div><div class="line">        <span class="comment">#&#123;$prefix&#125;#&#123;$property&#125;: $value;</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="引入mixin"><a href="#引入mixin" class="headerlink" title="引入mixin"></a>引入mixin</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@import <span class="string">'../mixin/mixin'</span>;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;sass官方地址：&lt;a href=&quot;https://www.sass.hk/&quot; target=&quot;_blank&quot;&gt;https://www.sass.hk/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="sass" scheme="http://zengdh.com/tags/sass/"/>
    
  </entry>
  
  <entry>
    <title>移动端开发笔记本</title>
    <link href="http://zengdh.com/2017/10/23/note11/"/>
    <id>http://zengdh.com/2017/10/23/note11/</id>
    <published>2017-10-23T01:57:58.753Z</published>
    <updated>2017-11-28T07:10:06.166Z</updated>
    
    <content type="html"><![CDATA[<p>移动wap开发笔记…</p>
<a id="more"></a>
<h2 id="1-移动端rem布局"><a href="#1-移动端rem布局" class="headerlink" title="1.移动端rem布局"></a>1.移动端rem布局</h2><p>通过js动态计算html的font-size值，通过rem作为单位进行开发，推荐使用sass、scss等预编译css开发工具，方便数值转换，或者用sublime插件转换<br>js代码:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">resize</span></span>()&#123;</div><div class="line">  var e=(navigator.userAgent,+document.documentElement.clientWidth/750)*100;</div><div class="line">  window.remFontSize=e=100&gt;e?e:100,</div><div class="line">  document.documentElement.style.fontSize=e+<span class="string">"px"</span></div><div class="line">&#125;</div><div class="line">var b=null,ua=navigator.userAgent;window.addEventListener(<span class="string">"resize"</span>,<span class="function"><span class="title">function</span></span>()&#123;clearTimeout(b),b=<span class="built_in">set</span>Timeout(resize,50)&#125;,!1),resize()</div></pre></td></tr></table></figure></p>
<p>或者采用手淘flexible计算<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div></pre></td><td class="code"><pre><div class="line">;(<span class="keyword">function</span>(win, lib) &#123;</div><div class="line">    var doc = win.document;</div><div class="line">    var docEl = doc.documentElement;</div><div class="line">    var metaEl = doc.querySelector(<span class="string">'meta[name="viewport"]'</span>);</div><div class="line">    var flexibleEl = doc.querySelector(<span class="string">'meta[name="flexible"]'</span>);</div><div class="line">    var dpr = 0;</div><div class="line">    var scale = 0;</div><div class="line">    var tid;</div><div class="line">    var flexible = lib.flexible || (lib.flexible = &#123;&#125;);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (metaEl) &#123;</div><div class="line">        //console.warn(<span class="string">'将根据已有的meta标签来设置缩放比例'</span>);</div><div class="line">        var match = metaEl.getAttribute(<span class="string">'content'</span>).match(/initial\-scale=([\d\.]+)/);</div><div class="line">        <span class="keyword">if</span> (match) &#123;</div><div class="line">            scale = parseFloat(match[1]);</div><div class="line">            dpr = parseInt(1 / scale);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (flexibleEl) &#123;</div><div class="line">        var content = flexibleEl.getAttribute(<span class="string">'content'</span>);</div><div class="line">        <span class="keyword">if</span> (content) &#123;</div><div class="line">            var initialDpr = content.match(/initial\-dpr=([\d\.]+)/);</div><div class="line">            var maximumDpr = content.match(/maximum\-dpr=([\d\.]+)/);</div><div class="line">            <span class="keyword">if</span> (initialDpr) &#123;</div><div class="line">                dpr = parseFloat(initialDpr[1]);</div><div class="line">                scale = parseFloat((1 / dpr).toFixed(2));</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (maximumDpr) &#123;</div><div class="line">                dpr = parseFloat(maximumDpr[1]);</div><div class="line">                scale = parseFloat((1 / dpr).toFixed(2));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!dpr &amp;&amp; !scale) &#123;</div><div class="line">        var isAndroid = win.navigator.appVersion.match(/android/gi);</div><div class="line">        var isIPhone = win.navigator.appVersion.match(/iphone/gi);</div><div class="line">        var devicePixelRatio = win.devicePixelRatio;</div><div class="line">        <span class="keyword">if</span> (isIPhone) &#123;</div><div class="line">            // iOS下，对于2和3的屏，用2倍的方案，其余的用1倍方案</div><div class="line">            <span class="keyword">if</span> (devicePixelRatio &gt;= 3 &amp;&amp; (!dpr || dpr &gt;= 3)) &#123;</div><div class="line">                dpr = 3;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (devicePixelRatio &gt;= 2 &amp;&amp; (!dpr || dpr &gt;= 2))&#123;</div><div class="line">                dpr = 2;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                dpr = 1;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            // 其他设备下，仍旧使用1倍的方案</div><div class="line">            dpr = 1;</div><div class="line">        &#125;</div><div class="line">        scale = 1 / dpr;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    docEl.setAttribute(<span class="string">'data-dpr'</span>, dpr);</div><div class="line">    <span class="keyword">if</span> (!metaEl) &#123;</div><div class="line">        metaEl = doc.createElement(<span class="string">'meta'</span>);</div><div class="line">        metaEl.setAttribute(<span class="string">'name'</span>, <span class="string">'viewport'</span>);</div><div class="line">        metaEl.setAttribute(<span class="string">'content'</span>, <span class="string">'initial-scale='</span> + scale + <span class="string">', maximum-scale='</span> + scale + <span class="string">', minimum-scale='</span> + scale + <span class="string">', user-scalable=no'</span>);</div><div class="line">        <span class="keyword">if</span> (docEl.firstElementChild) &#123;</div><div class="line">            docEl.firstElementChild.appendChild(metaEl);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            var wrap = doc.createElement(<span class="string">'div'</span>);</div><div class="line">            wrap.appendChild(metaEl);</div><div class="line">            doc.write(wrap.innerHTML);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">function</span> <span class="function"><span class="title">refreshRem</span></span>()&#123;</div><div class="line">        var width = docEl.getBoundingClientRect().width;</div><div class="line">        // <span class="keyword">if</span> (width / dpr &gt; 540) &#123;</div><div class="line">        //     width = 540 * dpr;</div><div class="line">        // &#125;</div><div class="line">        //var rem = width / 10;</div><div class="line">        var rem = 100 * (width / 750);</div><div class="line">        docEl.style.fontSize = rem + <span class="string">'px'</span>;</div><div class="line">        flexible.rem = win.rem = rem;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    win.addEventListener(<span class="string">'resize'</span>, <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">        clearTimeout(tid);</div><div class="line">        tid = <span class="built_in">set</span>Timeout(refreshRem, 300);</div><div class="line">    &#125;, <span class="literal">false</span>);</div><div class="line">    win.addEventListener(<span class="string">'pageshow'</span>, <span class="keyword">function</span>(e) &#123;</div><div class="line">        <span class="keyword">if</span> (e.persisted) &#123;</div><div class="line">            clearTimeout(tid);</div><div class="line">            tid = <span class="built_in">set</span>Timeout(refreshRem, 300);</div><div class="line">        &#125;</div><div class="line">    &#125;, <span class="literal">false</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (doc.readyState === <span class="string">'complete'</span>) &#123;</div><div class="line">        doc.body.style.fontSize = 12 * dpr + <span class="string">'px'</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        doc.addEventListener(<span class="string">'DOMContentLoaded'</span>, <span class="keyword">function</span>(e) &#123;</div><div class="line">            doc.body.style.fontSize = 12 * dpr + <span class="string">'px'</span>;</div><div class="line">        &#125;, <span class="literal">false</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    refreshRem();</div><div class="line"></div><div class="line">    flexible.dpr = win.dpr = dpr;</div><div class="line">    flexible.refreshRem = refreshRem;</div><div class="line">    flexible.rem2px = <span class="keyword">function</span>(d) &#123;</div><div class="line">        var val = parseFloat(d) * this.rem;</div><div class="line">        <span class="keyword">if</span> (typeof d === <span class="string">'string'</span> &amp;&amp; d.match(/rem$/)) &#123;</div><div class="line">            val += <span class="string">'px'</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">return</span> val;</div><div class="line">    &#125;</div><div class="line">    flexible.px2rem = <span class="keyword">function</span>(d) &#123;</div><div class="line">        var val = parseFloat(d) / this.rem;</div><div class="line">        <span class="keyword">if</span> (typeof d === <span class="string">'string'</span> &amp;&amp; d.match(/px$/)) &#123;</div><div class="line">            val += <span class="string">'rem'</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">return</span> val;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;)(window, window[<span class="string">'lib'</span>] || (window[<span class="string">'lib'</span>] = &#123;&#125;));</div></pre></td></tr></table></figure></p>
<h2 id="2-移动端IOS-click事件点击无效"><a href="#2-移动端IOS-click事件点击无效" class="headerlink" title="2.移动端IOS click事件点击无效"></a>2.移动端IOS click事件点击无效</h2><p>解决方案：<br>  1.将 click 事件直接绑定到目标元素（即 .target）上<br>  2.将目标元素换成 a或者 button 等可点击的元素<br>  3.将 click 事件委托到非 document 或 body 的父级元素上<br>  4.给目标元素加一条样式规则 cursor: pointer;<br>推荐使用第4种方案。</p>
<h2 id="3-移动端wap视频"><a href="#3-移动端wap视频" class="headerlink" title="3.移动端wap视频"></a>3.移动端wap视频</h2><p>开发需求：检测当前网络状态，如果处于非wifi状态下，提示用户该网络处于非wifi状态，播放视频需要消耗手机流量<br>html5组件：video<br>第三方组件：tvp.player.js   zepto.js<br>开发思路：<br>1.网络状态检测<br>code:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">var wifi = <span class="literal">true</span>;</div><div class="line">var ua = window.navigator.userAgent;</div><div class="line">var con = window.navigator.connection;</div><div class="line">// 如果是微信</div><div class="line"><span class="keyword">if</span>(/MicroMessenger/.test(ua))&#123;</div><div class="line">// 如果是微信6.0以上版本，用UA来判断</div><div class="line"><span class="keyword">if</span>(/NetType/.test(ua))&#123;</div><div class="line"><span class="keyword">if</span>(ua.match(/NetType\/(\S*)/)[1] != <span class="string">'WIFI'</span>)&#123;</div><div class="line">wifi = <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line">// 如果是微信6.0以下版本，调用微信私有接口WeixinJSBridge</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">document.addEventListener(<span class="string">"WeixinJSBridgeReady"</span>,<span class="keyword">function</span> <span class="function"><span class="title">onBridgeReady</span></span>()&#123;</div><div class="line">WeixinJSBridge.invoke(<span class="string">'getNetworkType'</span>,&#123;&#125;,<span class="keyword">function</span>(e)&#123;</div><div class="line"><span class="keyword">if</span>(e.err_msg != <span class="string">"network_type:wifi"</span>)&#123;</div><div class="line">wifi = <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line">&#125;);</div><div class="line">&#125;</div><div class="line">// 如果支持navigator.connection</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(con)&#123;</div><div class="line">var network = con.type;</div><div class="line"><span class="keyword">if</span>(network != <span class="string">"wifi"</span> &amp;&amp; network != <span class="string">"2"</span> &amp;&amp; network != <span class="string">"unknown"</span>)&#123;  //unknown是为了兼容Chrome Canary</div><div class="line">wifi = <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>2.初始化video组件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var video = new tvp.VideoInfo();</div><div class="line">var videoId = <span class="string">''</span>;//视频vid</div><div class="line">var videoPic = <span class="string">''</span>;//默认图片地址</div><div class="line">video.setVid(videoId);//视频vid</div><div class="line">var player = new tvp.Player();//视频高宽</div><div class="line">player.setCurVideo(video);</div><div class="line">player.addParam(<span class="string">"autoplay"</span>,<span class="string">"0"</span>);//是否自动播放，1为自动播放，0为不自动播放</div><div class="line">player.addParam(<span class="string">"showend"</span>,0);</div><div class="line">player.addParam(<span class="string">"adplay"</span>,0);</div><div class="line">player.addParam(<span class="string">"wmode"</span>,<span class="string">"transparent"</span>);</div><div class="line">player.addParam(<span class="string">"controls"</span>,<span class="string">"0"</span>);</div><div class="line">player.addParam(<span class="string">"preload"</span>,<span class="string">"none"</span>);</div><div class="line">player.addParam(<span class="string">"pic"</span>,videoPic);//默认图片地址</div><div class="line">//  player.addParam(<span class="string">"flashskin"</span>, <span class="string">""</span>);//是否调用精简皮肤，不使用则删掉此行代码</div><div class="line">player.write(<span class="string">"videoCon"</span>);</div></pre></td></tr></table></figure></p>
<p>3.判断网络状态选择不同的显示方式<br>4.点击播放时，Android会自动全屏并显示加载动画百分比，ios会延迟反应，等加载一段才弹出视频窗口，这里对ios做一个加载检测处理，在弹出视频窗口之前做一个动画过渡<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">video.onplay = <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">var checkPlay=<span class="built_in">set</span>Interval(<span class="function"><span class="title">function</span></span>()&#123;//检测currentTime是否开始播放</div><div class="line"><span class="keyword">if</span>(video.currentTime&gt;0) &#123;</div><div class="line">//去掉加载动画，结束定时器检测</div><div class="line">clearInterval(checkPlay);</div><div class="line">&#125;;</div><div class="line">&#125;,50)</div><div class="line">&#125;</div><div class="line">//点击继续播放事件</div><div class="line">$(<span class="string">'body'</span>).on(<span class="string">'click'</span>,<span class="string">'播放按钮'</span>,<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">//去掉遮罩，显示加载动画</div><div class="line">video.play();</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h2 id="4-移动端wap唤起QQ链接"><a href="#4-移动端wap唤起QQ链接" class="headerlink" title="4.移动端wap唤起QQ链接"></a>4.移动端wap唤起QQ链接</h2><p>需求:点击QQ链接弹出QQ聊天窗口，如果当前手机没安装QQ则跳转至下载app链接<br>code:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">var userAgentInfo = navigator.userAgent;</div><div class="line">var isAndroid = userAgentInfo.indexOf(<span class="string">'Android'</span>) &gt; -1 || userAgentInfo.indexOf(<span class="string">'Adr'</span>) &gt; -1;//android终端</div><div class="line">var isiOS = !!userAgentInfo.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/); //ios终端</div><div class="line">var qqId = <span class="string">'客服QQ号码'</span>;</div><div class="line"></div><div class="line">var loadDateTime = new Date();</div><div class="line">var checkTime = <span class="built_in">set</span>Timeout(<span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">var timeOutDateTime = new Date();</div><div class="line"><span class="keyword">if</span> (!loadDateTime || timeOutDateTime - loadDateTime &lt;5010) &#123;//5秒响应时长</div><div class="line"><span class="keyword">if</span>(isAndroid) &#123;</div><div class="line">location.href=<span class="string">"https://qd.myapp.com/myapp/qqteam/AndroidQQ/mobileqq_android.apk"</span>;</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(isiOS) &#123;</div><div class="line">location.href=<span class="string">"https://itunes.apple.com/cn/app/qq/id444934666?mt=8"</span>;</div><div class="line">&#125;<span class="keyword">else</span> &#123;</div><div class="line">location.href=<span class="string">"https://qd.myapp.com/myapp/qqteam/AndroidQQ/mobileqq_android.apk"</span>;</div><div class="line">//market://details?id=com.tencent.mobileqq 打开跳转应用市场</div><div class="line">//http://app.mi.com/details?id=com.tencent.mobileqq 小米应用市场</div><div class="line">&#125;;</div><div class="line">&#125;</div><div class="line">clearTimeout(checkTime);</div><div class="line">&#125;,5000);//部分安卓手机弹出QQ有确认操作，不会直接弹出QQ</div><div class="line">location.href = <span class="string">"mqqwpa://im/chat?chat_type=wpa&amp;uin="</span>+qqId+<span class="string">"&amp;version=1&amp;src_type=web&amp;web_src=bjhuli.com"</span>;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;移动wap开发笔记…&lt;/p&gt;
    
    </summary>
    
    
      <category term="移动端wap开发" scheme="http://zengdh.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AFwap%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>日常踩坑笔记本</title>
    <link href="http://zengdh.com/2017/06/16/note10/"/>
    <id>http://zengdh.com/2017/06/16/note10/</id>
    <published>2017-06-16T02:45:15.024Z</published>
    <updated>2017-10-23T05:40:21.147Z</updated>
    
    <content type="html"><![CDATA[<p>记录日常开发各种坑坑洼洼，吾日三省吾身….</p>
<a id="more"></a>
<h2 id="1-IE8、IE9-ajax跨域不发起请求"><a href="#1-IE8、IE9-ajax跨域不发起请求" class="headerlink" title="1.IE8、IE9  ajax跨域不发起请求"></a>1.IE8、IE9  ajax跨域不发起请求</h2><p>W3C CORS（跨域资源共享）是对于跨域请求的一个规范，目前各个主流浏览器都实现了这个规范，IE8开始，增加了XDomainRequest作为跨域请求的对象，而Firefox与Chrom则CORS直接实现在XMLHttpRequest对象中，更方便使用。不过IE10中，XMLHttpRequest对象也实现了CORS。</p>
<p>XDomainRequest:<br>1.仅只是 GET 和 POST 两个方法。<br>2.支持的事件有：onerror，onload，onprogress，ontimeout<br>3.提供的方法：abort，open，send<br>4.提供的属性：contentType， responseText，timeout</p>
<p>demo:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">var url = <span class="string">'xxxxxxxxx'</span>;</div><div class="line">var xdr = new XDomainRequest();</div><div class="line">xdr.onload = <span class="function"><span class="title">function</span></span>() &#123;           </div><div class="line">    console.log(xdr.responseText);</div><div class="line">&#125;;</div><div class="line">xdr.onerror = <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">    console.log(<span class="string">"error"</span>);</div><div class="line">&#125;;</div><div class="line"> </div><div class="line">xdr.timeout = 3000;</div><div class="line">xdr.ontimeout = <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">    console.log(<span class="string">"timeout"</span>);</div><div class="line">&#125;;</div><div class="line"> </div><div class="line">xdr.open(<span class="string">"get"</span>, url);</div><div class="line">xdr.send();</div><div class="line"></div><div class="line">//兼容处理</div><div class="line"><span class="keyword">if</span> (window.XDomainRequest) &#123;</div><div class="line">  </div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (window.XMLHttpRequest) &#123;</div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="2-IE10以下高德api接口返回数据未知错误"><a href="#2-IE10以下高德api接口返回数据未知错误" class="headerlink" title="2.IE10以下高德api接口返回数据未知错误"></a>2.IE10以下高德api接口返回数据未知错误</h2><p>高德地图api接口<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://restapi.amap.com/v3/geocode/geo?key=&lt;您的key&gt;&amp;address=杭州</div></pre></td></tr></table></figure></p>
<p>但在ie10以下返回的结果时未知错误。。查阅高德地图文档错误后，给出的反馈是传参时中文字符进行url编码转换<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">'https://restapi.amap.com/v3/geocode/geo?key=&lt;您的key&gt;&amp;address='</span> + encodeURI(地址)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录日常开发各种坑坑洼洼，吾日三省吾身….&lt;/p&gt;
    
    </summary>
    
    
      <category term="坑坑洼洼踩踩踩" scheme="http://zengdh.com/tags/%E5%9D%91%E5%9D%91%E6%B4%BC%E6%B4%BC%E8%B8%A9%E8%B8%A9%E8%B8%A9/"/>
    
  </entry>
  
  <entry>
    <title>初探mongodb（二）</title>
    <link href="http://zengdh.com/2017/06/02/note9/"/>
    <id>http://zengdh.com/2017/06/02/note9/</id>
    <published>2017-06-02T07:53:27.165Z</published>
    <updated>2017-06-02T09:29:31.079Z</updated>
    
    <content type="html"><![CDATA[<p>mongodb安装完成后，开始实战操作，这里使用express框架和mongodb可视化工具Robomongo一起搭配使用。</p>
<a id="more"></a>
<h2 id="1-安装express"><a href="#1-安装express" class="headerlink" title="1.安装express"></a>1.安装express</h2><p>npm安装太慢，推荐cnpm,使用淘宝镜像<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure></p>
<p>全局安装：cnpm install -g express<br>项目范围内安装： cnpm install express –save</p>
<p>安装完express，在项目根目录新建app.js<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var express = require(<span class="string">'express'</span>);</div><div class="line">var app = express();</div><div class="line"></div><div class="line">app.get(<span class="string">'/'</span>, <span class="keyword">function</span> (req, res) &#123;</div><div class="line">  res.send(<span class="string">'Hello World!'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">var server = app.listen(3000, <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">  var host = server.address().address;</div><div class="line">  var port = server.address().port;</div><div class="line"></div><div class="line">  console.log(<span class="string">'Example app listening at http://%s:%s'</span>, host, port);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>打开cmd，cd至项目目录，启动node app.js即可运行服务</p>
<h2 id="2-可视化工具Robomongo"><a href="#2-可视化工具Robomongo" class="headerlink" title="2.可视化工具Robomongo"></a>2.可视化工具Robomongo</h2><p><a href="https://robomongo.org/" target="_blank">官网传送门</a><br>下载安装完成后，打开Robomongo<br><img src="/img/img8.png"><br>点击Create,输入Name，以及Address，端口默认为27017，地址Address和端口号一般不用更改。<br><img src="/img/img9.png"><br>这样名为test的mongodb连接创建完毕。</p>
<h2 id="3-MongoDB和MySQL"><a href="#3-MongoDB和MySQL" class="headerlink" title="3.MongoDB和MySQL"></a>3.MongoDB和MySQL</h2><p><img src="/img/img10.png"></p>
<h2 id="4-创建数据库"><a href="#4-创建数据库" class="headerlink" title="4.创建数据库"></a>4.创建数据库</h2><p><img src="/img/img11.png"><img src="/img/img12.png"><br>这里取名testDB,右键testDB下的collection新建表<br><img src="/img/img13.png"><br>这样一张表就建好了，然后往表里添加字段和数据，右键表名点击insert documet<br>MongoDB数据库中文档(每一行的数据)的数据结构和JSON基本一样，所有存储在集合中的数据都是BSON格式，BSON是一种类JSON的一种二进制形式的存储格式，简称Binary JSON。因此，我们在插入数据时，只要像JSON格式那样输入我们想要插入的数据。点击save保存即可成功插入数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    userName:<span class="string">'zdh'</span>,</div><div class="line">    age:18,</div><div class="line">    sex:<span class="string">'男'</span>,</div><div class="line">    job:<span class="string">'前端'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>点击save即可保存至表中：<br><img src="/img/img14.png"></p>
<h2 id="5-连接数据库"><a href="#5-连接数据库" class="headerlink" title="5.连接数据库"></a>5.连接数据库</h2><p>使用MongoDB原生自带的API来创建连接，直接在app.js输入以下代码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">var MongoClient = require(<span class="string">'mongodb'</span>).MongoClient,</div><div class="line">    DB_CONN_STR = <span class="string">'mongodb://localhost:27017/testDB'</span>; //数据库为 <span class="built_in">test</span>DB</div><div class="line">var selectData = <span class="keyword">function</span>(db, callback) &#123;  </div><div class="line">  //连接到user表  </div><div class="line">  var collection = db.collection(<span class="string">'user'</span>);</div><div class="line">  //查询数据</div><div class="line">  var <span class="built_in">where</span>Str = &#123;<span class="string">"userName"</span>:<span class="string">'zdh'</span>&#125;;</div><div class="line">  collection.find(<span class="built_in">where</span>Str).toArray(<span class="keyword">function</span>(err, result) &#123;</div><div class="line">    <span class="keyword">if</span>(err)</div><div class="line">    &#123;</div><div class="line">      console.log(<span class="string">'Error:'</span>+ err);</div><div class="line">      <span class="built_in">return</span>;</div><div class="line">    &#125;     </div><div class="line">    callback(result);</div><div class="line">  &#125;);</div><div class="line">&#125; </div><div class="line">MongoClient.connect(DB_CONN_STR, <span class="keyword">function</span>(err, db) &#123;</div><div class="line">  console.log(<span class="string">"连接成功！"</span>);</div><div class="line">  selectData(db, <span class="keyword">function</span>(result) &#123;</div><div class="line">    console.log(result);</div><div class="line">    db.close();</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="6-使用Mongoose连接数据库"><a href="#6-使用Mongoose连接数据库" class="headerlink" title="6.使用Mongoose连接数据库"></a>6.使用Mongoose连接数据库</h2><p>除了使用MongoDB原生自带的API来创建连接外，也可以使用Mongoose配合操作，mongoose文档（<a href="http://www.nodeclass.com/api/mongoose.html" target="_blank">传送门</a>）</p>
<p>app.js中使用mongoose:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">const pkg = require(<span class="string">'./package'</span>)</div><div class="line">const express = require(<span class="string">'express'</span>)</div><div class="line">const bodyParser = require(<span class="string">'body-parser'</span>)</div><div class="line">const mongoose = require(<span class="string">'mongoose'</span>)</div><div class="line">const user = require(<span class="string">'./api/user'</span>)</div><div class="line"></div><div class="line">mongoose.connect(<span class="string">'mongodb://localhost/testDB'</span>)</div><div class="line">mongoose.Promise = global.Promise</div><div class="line"> const db = mongoose.connection;</div><div class="line">db.on(<span class="string">'error'</span>, <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">    console.log(<span class="string">'Database connection error.'</span>);</div><div class="line">&#125;);</div><div class="line">db.once(<span class="string">'open'</span>, <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">    console.log(<span class="string">'The Database has connected.'</span>)</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line">const app = express()</div><div class="line">const port = process.env.PORT || 3000</div><div class="line"></div><div class="line">app.use(bodyParser.json())</div><div class="line">app.use(bodyParser.urlencoded(&#123; extended: <span class="literal">true</span> &#125;))</div><div class="line">app.use(express.static(<span class="string">'dist'</span>))</div><div class="line">app.use(<span class="string">'/api'</span>,user)</div><div class="line"></div><div class="line">app.listen(port, () =&gt; &#123;</div><div class="line">  console.log(`<span class="variable">$&#123;pkg.name&#125;</span> listening on port <span class="variable">$&#123;port&#125;</span>`)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">module.exports = app</div></pre></td></tr></table></figure></p>
<p>在项目根目录下新建了api文件夹，用于存放操作数据库的接口方法，api文件下user.js如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">const express = require(<span class="string">'express'</span>)</div><div class="line">const router = express.Router()</div><div class="line">const User = require(<span class="string">'../models/user'</span>)</div><div class="line"></div><div class="line">//查询user表中的数据</div><div class="line">router.get(<span class="string">'/userList'</span>, (req, res) =&gt; &#123;</div><div class="line">  User.find(<span class="keyword">function</span>(err,persons)&#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123;</div><div class="line">        res.json(err)</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        res.json(persons)</div><div class="line">    &#125;</div><div class="line"> &#125;)</div><div class="line">&#125;)</div><div class="line">//往user表中插入数据</div><div class="line">router.get(<span class="string">'/insertUser'</span>, (req,res) =&gt; &#123;</div><div class="line">  var user = new Movie(&#123;</div><div class="line">      userName : <span class="string">'zengdh'</span>,                </div><div class="line">      age : <span class="string">'20'</span>,</div><div class="line">      sex : <span class="string">'男'</span>,</div><div class="line">      job : <span class="string">'前端攻城狮'</span></div><div class="line">  &#125;);</div><div class="line">  user.save(<span class="keyword">function</span> (err, results) &#123;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (err) &#123;</div><div class="line">          res.send(<span class="string">"Error:"</span> + err)</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">else</span> &#123;</div><div class="line">          res.send(&#123;</div><div class="line">            message: <span class="string">'数据添加成功'</span>,</div><div class="line">            data: results</div><div class="line">          &#125;)</div><div class="line">      &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>在项目根目录下新建models文件夹，用于存放数据模型，这里models下user.js内容如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">const mongoose = require(<span class="string">'mongoose'</span>)</div><div class="line"></div><div class="line">const userSchema =new mongoose.Schema(&#123;</div><div class="line">  userName:  &#123; <span class="built_in">type</span>: String &#125;,//用户名</div><div class="line">  age:  &#123; <span class="built_in">type</span>: Number &#125;, // 年龄</div><div class="line">  sex:  &#123; <span class="built_in">type</span>: String &#125;,// 性别</div><div class="line">  job:  &#123; <span class="built_in">type</span>: String &#125;, // 工作</div><div class="line">&#125;,&#123;collection:<span class="string">'user'</span>&#125;)</div><div class="line">// 这边collection如果不写的话，在调用api接口的时候，会在数据库中新建一张后缀名加了s的表，即users</div><div class="line"></div><div class="line">const Movie = module.exports = mongoose.model(<span class="string">'user'</span>,userSchema)</div></pre></td></tr></table></figure></p>
<h2 id="7-调用接口"><a href="#7-调用接口" class="headerlink" title="7.调用接口"></a>7.调用接口</h2><p>在package.json中加了启动服务的命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"server"</span>: <span class="string">"nodemon app.js"</span></div></pre></td></tr></table></figure></p>
<p>运行 npm run server，浏览器输入”localhost:3000/api/userList” ，这是刚才在api文件夹下user.js中写的获取数据的接口，调用成功后返回内容如下：<br><img src="/img/img15.png"><br>这是刚才通过数据库直接插入表中的数据，接下来调用一下插入信息的接口，浏览器输入”localhost:3000/api/insertUser” ，调用成功后返回内容如下：<br><img src="/img/img16.png"><br>然后看下数据库：<br><img src="/img/img17.png"><br>数据插入成功了，大功告成。</p>
<p>over</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mongodb安装完成后，开始实战操作，这里使用express框架和mongodb可视化工具Robomongo一起搭配使用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="express" scheme="http://zengdh.com/tags/express/"/>
    
      <category term="mongodb" scheme="http://zengdh.com/tags/mongodb/"/>
    
      <category term="node" scheme="http://zengdh.com/tags/node/"/>
    
      <category term="mongoose" scheme="http://zengdh.com/tags/mongoose/"/>
    
      <category term="body-parser" scheme="http://zengdh.com/tags/body-parser/"/>
    
      <category term="robomongo" scheme="http://zengdh.com/tags/robomongo/"/>
    
  </entry>
  
  <entry>
    <title>初探mongodb（一）</title>
    <link href="http://zengdh.com/2017/06/02/note8/"/>
    <id>http://zengdh.com/2017/06/02/note8/</id>
    <published>2017-06-02T06:56:26.637Z</published>
    <updated>2017-06-02T07:51:04.486Z</updated>
    
    <content type="html"><![CDATA[<p>配置：</p>
<p>1.nodejs（官网地址：<a href="https://nodejs.org/en/" target="_blank">https://nodejs.org/en/</a>下载安装）<br>2.express，基于nodejs的开发框架-<a href="http://www.expressjs.com.cn/" target="_blank">传送门</a><br>3.mongodb<br>4.mongoose</p>
<a id="more"></a>
<h2 id="1-mongodb-安装配置"><a href="#1-mongodb-安装配置" class="headerlink" title="1.mongodb 安装配置"></a>1.mongodb 安装配置</h2><p>进入mongodb官网下载安装，附上<a href="https://www.mongodb.com/download-center?jmp=nav#community" target="_blank">传送门</a>，安装完成后的目录文件：<br><img src="/img/img5.png"></p>
<p style="color:red">logs这个目录是后面手动新建的文件夹，用来存放日志文件的。</p>

<h2 id="2-修改环境变量"><a href="#2-修改环境变量" class="headerlink" title="2.修改环境变量"></a>2.修改环境变量</h2><p>mongodb安装完成后，将mongdb的文件目录路径添加至系统变量path下<br><img src="/img/img6.png"></p>
<h2 id="3-创建数据库目录"><a href="#3-创建数据库目录" class="headerlink" title="3.创建数据库目录"></a>3.创建数据库目录</h2><p>数据库目录不会自动创建，需要手动创建，这边我手动创建在F:\data\db</p>
<h2 id="4-指定数据库存放目录及日志"><a href="#4-指定数据库存放目录及日志" class="headerlink" title="4.指定数据库存放目录及日志"></a>4.指定数据库存放目录及日志</h2><p>打开cmd，输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongod --dbpath <span class="string">"F:\data\db"</span> --logpath <span class="string">"F:\mongodb\logs\mongod.log"</span></div></pre></td></tr></table></figure></p>
<h2 id="5-安装mongodb为windows服务"><a href="#5-安装mongodb为windows服务" class="headerlink" title="5.安装mongodb为windows服务"></a>5.安装mongodb为windows服务</h2><p>通过命令启动mongo服务太麻烦，为mongodb注册系统服务，以管理员身份打开cmd，输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongod --install --dbpath <span class="string">"F:\data\db"</span> --logpath <span class="string">"F:\mongodb\logs\mongod.log"</span></div></pre></td></tr></table></figure></p>
<p>更多设置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongod --bind_ip yourIPadress --logpath <span class="string">"F:\mongodb\logs\mongod.log"</span> --logappend --dbpath <span class="string">"D:\data\db"</span> --port yourPortNumber --serviceName <span class="string">"YourServiceName"</span> --serviceDisplayName <span class="string">"YourServiceName"</span> --install</div></pre></td></tr></table></figure></p>
<p>参数 描述<br>–bind_ip 绑定服务IP，若绑定127.0.0.1，则只能本机访问，不指定默认本地所有IP<br>–logpath 指定MongoDB日志文件，注意是指定文件不是目录<br>–logappend 使用追加的方式写日志<br>–dbpath 指定数据库路径<br>–port 指定服务端口号，默认端口27017<br>–serviceName 指定服务名称<br>–serviceDisplayName 指定服务名称，有多个mongodb服务时执行。<br>–install 指定作为一个Windows服务安装。</p>
<h2 id="6-mongo服务指令"><a href="#6-mongo服务指令" class="headerlink" title="6.mongo服务指令"></a>6.mongo服务指令</h2><p>添加完window服务后，以管理员身份打开cmd，启动服务输入命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">net start MongoDB</div></pre></td></tr></table></figure></p>
<p>关闭服务命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">net stop MongoDB</div></pre></td></tr></table></figure></p>
<p><img src="/img/img7.png"></p>
<h2 id="7-报错"><a href="#7-报错" class="headerlink" title="7.报错"></a>7.报错</h2><p>如果报错“MongoDB 服务正在启动 .MongoDB 服务无法启动。发生服务特定错误: 100.”，则前去db目录下的mongod.lock和storage.bson文件删掉，以管理员身份运行命令行然后重新启动服务即可。</p>
<p>over</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;配置：&lt;/p&gt;
&lt;p&gt;1.nodejs（官网地址：&lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot;&gt;https://nodejs.org/en/&lt;/a&gt;下载安装）&lt;br&gt;2.express，基于nodejs的开发框架-&lt;a href=&quot;http://www.expressjs.com.cn/&quot; target=&quot;_blank&quot;&gt;传送门&lt;/a&gt;&lt;br&gt;3.mongodb&lt;br&gt;4.mongoose&lt;/p&gt;
    
    </summary>
    
    
      <category term="express" scheme="http://zengdh.com/tags/express/"/>
    
      <category term="mongodb" scheme="http://zengdh.com/tags/mongodb/"/>
    
      <category term="node" scheme="http://zengdh.com/tags/node/"/>
    
      <category term="mongoose" scheme="http://zengdh.com/tags/mongoose/"/>
    
      <category term="body-parser" scheme="http://zengdh.com/tags/body-parser/"/>
    
      <category term="robomongo" scheme="http://zengdh.com/tags/robomongo/"/>
    
  </entry>
  
  <entry>
    <title>前后端分离实践-gulp+express</title>
    <link href="http://zengdh.com/2017/05/25/note7/"/>
    <id>http://zengdh.com/2017/05/25/note7/</id>
    <published>2017-05-25T02:50:44.877Z</published>
    <updated>2017-05-25T02:50:44.877Z</updated>
    
    <content type="html"><![CDATA[<h2 id="技术栈：gulp-express-browser-sync-seajs-sass-ejs"><a href="#技术栈：gulp-express-browser-sync-seajs-sass-ejs" class="headerlink" title="技术栈：gulp+express+browser-sync+seajs+sass+ejs"></a>技术栈：gulp+express+browser-sync+seajs+sass+ejs</h2><p>1.前端打包工具：gulp<br>2.express 做中间件和路由配置<br>3.browser-sync 浏览器自动刷新<br>4.seajs 模块化管理js<br>5.sass css预编译<br>6.ejs 模板引擎</p>
<a id="more"></a>
<h2 id="1-安装express"><a href="#1-安装express" class="headerlink" title="1.安装express"></a>1.安装express</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g express-generator</div></pre></td></tr></table></figure>
<h2 id="2-新建工程"><a href="#2-新建工程" class="headerlink" title="2.新建工程"></a>2.新建工程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ express <span class="_">-e</span> demo</div><div class="line">$ <span class="built_in">cd</span> demo &amp;&amp; npm install</div></pre></td></tr></table></figure>
<h2 id="3-修改routes引入方式"><a href="#3-修改routes引入方式" class="headerlink" title="3.修改routes引入方式"></a>3.修改routes引入方式</h2><p>app.js<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var express = require(<span class="string">'express'</span>);</div><div class="line">var routes = require(<span class="string">'./routes/index'</span>);</div><div class="line">var app = express();</div><div class="line">routes(app);</div></pre></td></tr></table></figure></p>
<p>/routes/index.js<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">module.exports = <span class="keyword">function</span>(app) &#123;</div><div class="line">  app.get(<span class="string">'/'</span>, <span class="keyword">function</span> (req, res) &#123;</div><div class="line">    res.render(<span class="string">'index'</span>, &#123; title: <span class="string">'Express'</span> &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="4-nodemon-browser-sync浏览器自动刷新"><a href="#4-nodemon-browser-sync浏览器自动刷新" class="headerlink" title="4.nodemon+browser-sync浏览器自动刷新"></a>4.nodemon+browser-sync浏览器自动刷新</h2><p>引入依赖<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var browserSync = require(<span class="string">'browser-sync'</span>);</div><div class="line">var nodemon = require(<span class="string">'gulp-nodemon'</span>);</div></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">// 浏览器同步，用7000端口去代理Express的3000端口</div><div class="line">gulp.task(<span class="string">'browser-sync'</span>, [<span class="string">'nodemon'</span>], <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">  browserSync.init(null, &#123;</div><div class="line">    notify: <span class="literal">false</span>,//关闭页面通知</div><div class="line">    proxy: <span class="string">"http://localhost:3000"</span>,</div><div class="line">    files: [<span class="string">"dist/views/*.*"</span>,<span class="string">"dist/public/scss/*.*"</span>,<span class="string">"dist/public/javascripts/*.*"</span>,<span class="string">"dist/public/images/*.*"</span>],</div><div class="line">    browser: <span class="string">"chrome"</span>,</div><div class="line">    port: 7000,</div><div class="line">  &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// 开启Express服务</div><div class="line">gulp.task(<span class="string">'nodemon'</span>, <span class="keyword">function</span> (cb) &#123;</div><div class="line">  </div><div class="line">  var started = <span class="literal">false</span>;</div><div class="line">  </div><div class="line">  <span class="built_in">return</span> nodemon(&#123;</div><div class="line">    script: <span class="string">'bin/www'</span></div><div class="line">  &#125;).on(<span class="string">'start'</span>, <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">    //为了避免nodemon开始多次</div><div class="line">    <span class="keyword">if</span> (!started) &#123;</div><div class="line">      cb();</div><div class="line">      started = <span class="literal">true</span>; </div><div class="line">    &#125; </div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="5-http-proxy-middleware跨域"><a href="#5-http-proxy-middleware跨域" class="headerlink" title="5.http-proxy-middleware跨域"></a>5.http-proxy-middleware跨域</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app.use(<span class="string">'/api'</span>, proxy(&#123;target: <span class="string">'http://localhost:8080'</span>, changeOrigin: <span class="literal">true</span>&#125;));</div></pre></td></tr></table></figure>
<h2 id="6-gulp配置"><a href="#6-gulp配置" class="headerlink" title="6.gulp配置"></a>6.gulp配置</h2><p>和之前的一样</p>
<h2 id="7-ejs基本语法"><a href="#7-ejs基本语法" class="headerlink" title="7.ejs基本语法"></a>7.ejs基本语法</h2><p>无缓冲的条件语句元素<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;% code %&gt;</div></pre></td></tr></table></figure></p>
<p>转义HTML，该code并且会打印出来<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;%= code %&gt;</div></pre></td></tr></table></figure></p>
<p>非转义的buffering，该code并且会打印出来<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;%- code %&gt;</div></pre></td></tr></table></figure></p>
<p>内嵌别的文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;% include file %&gt;</div></pre></td></tr></table></figure></p>
<p>指定布局文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;% layout(file) -%&gt;</div></pre></td></tr></table></figure></p>
<p>包含js脚本文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;% script(file) -%&gt;</div></pre></td></tr></table></figure></p>
<p>包含css文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;% stylesheet(file) -%&gt;</div></pre></td></tr></table></figure></p>
<p>指定块内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;% block(code, code) -%&gt;</div></pre></td></tr></table></figure></p>
<h2 id="8-已上传github"><a href="#8-已上传github" class="headerlink" title="8.已上传github"></a>8.已上传github</h2><p><a href="https://github.com/zdh-chase/gulp-cli" target="_blank">https://github.com/zdh-chase/gulp-cli</a></p>
<p>over</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;技术栈：gulp-express-browser-sync-seajs-sass-ejs&quot;&gt;&lt;a href=&quot;#技术栈：gulp-express-browser-sync-seajs-sass-ejs&quot; class=&quot;headerlink&quot; title=&quot;技术栈：gulp+express+browser-sync+seajs+sass+ejs&quot;&gt;&lt;/a&gt;技术栈：gulp+express+browser-sync+seajs+sass+ejs&lt;/h2&gt;&lt;p&gt;1.前端打包工具：gulp&lt;br&gt;2.express 做中间件和路由配置&lt;br&gt;3.browser-sync 浏览器自动刷新&lt;br&gt;4.seajs 模块化管理js&lt;br&gt;5.sass css预编译&lt;br&gt;6.ejs 模板引擎&lt;/p&gt;
    
    </summary>
    
    
      <category term="gulp" scheme="http://zengdh.com/tags/gulp/"/>
    
      <category term="seajs" scheme="http://zengdh.com/tags/seajs/"/>
    
      <category term="sass" scheme="http://zengdh.com/tags/sass/"/>
    
      <category term="前后端分离" scheme="http://zengdh.com/tags/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB/"/>
    
      <category term="express" scheme="http://zengdh.com/tags/express/"/>
    
      <category term="browser-sync" scheme="http://zengdh.com/tags/browser-sync/"/>
    
      <category term="ejs" scheme="http://zengdh.com/tags/ejs/"/>
    
  </entry>
  
  <entry>
    <title>git日常提交步骤-基本命令行</title>
    <link href="http://zengdh.com/2017/05/25/note6/"/>
    <id>http://zengdh.com/2017/05/25/note6/</id>
    <published>2017-05-25T02:50:44.876Z</published>
    <updated>2017-05-25T02:50:44.877Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-下载代码"><a href="#1-下载代码" class="headerlink" title="1.下载代码"></a>1.下载代码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> http//xxxx.git –b dev xxxx_dev_local</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>注解：<br>1)   -b dev   指定想要下载的分支，去掉省略的话下载的是默认分支是master（注：默认分支可以修改）<br>2)   xxxx_dev_local是我想要在本地创建的git库文件夹名字，去掉省略的话下载好的git库名字是xxxx git库的名字，建议使用这种重命名方式</p>
<h2 id="2-更新代码"><a href="#2-更新代码" class="headerlink" title="2.更新代码"></a>2.更新代码</h2><p>注：每次修改前养成同步更新代码的好习惯<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git pull –rebase</div></pre></td></tr></table></figure></p>
<p>如果提示冲突，说明本地git库中未入库的提交中有修改和代码库中冲突了，修改冲突文件并删除冲突标识&lt;&lt;&lt;&lt;&lt; ==== &gt;&gt;&gt;&gt;后:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git add 冲突文件名               //加入git index中</div><div class="line">git rebase –<span class="built_in">continue</span>                 //继续更新到最新的base上</div></pre></td></tr></table></figure></p>
<h2 id="3-修改、增加或删除代码文件到git-index缓存中"><a href="#3-修改、增加或删除代码文件到git-index缓存中" class="headerlink" title="3.修改、增加或删除代码文件到git index缓存中"></a>3.修改、增加或删除代码文件到git index缓存中</h2><p>修改或新增加代码文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git add file_name</div></pre></td></tr></table></figure></p>
<p>删除代码文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git rm file_name</div></pre></td></tr></table></figure></p>
<h2 id="4-提交本地git库index缓存中的修改"><a href="#4-提交本地git库index缓存中的修改" class="headerlink" title="4.提交本地git库index缓存中的修改"></a>4.提交本地git库index缓存中的修改</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit –m “just a <span class="built_in">test</span> <span class="keyword">for</span> commit ”</div></pre></td></tr></table></figure>
<p>如果本地修改不对或commit的LOG需要修改可以使用：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit –-amend //修复上一次提交，不要修改Merge提交</div></pre></td></tr></table></figure></p>
<p>##5.更新代码<br>注：每次push前养成同步更新代码的好习惯<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git pull –rebase</div></pre></td></tr></table></figure></p>
<p>如果提示冲突，说明本地git库中未入库的提交中有修改和代码库中冲突了，修改冲突文件并删除冲突标识&lt;&lt;&lt;&lt;&lt; ==== &gt;&gt;&gt;&gt;后:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git add 冲突文件名               //加入git index中</div><div class="line">git rebase –<span class="built_in">continue</span>                 //继续更新到最新的base上</div></pre></td></tr></table></figure></p>
<p>##6.推送提交到服务器上的git库中<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push</div></pre></td></tr></table></figure></p>
<p>注：默认会推送到我们下载git库时的-b 后面加的那个分支，没有加默认是master，这个命令完整版实际上是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin 当前分支名:我们下载的分支名</div></pre></td></tr></table></figure></p>
<p>##7.解消代码冲突<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git merge xxxx_branch 或者 git pull 时 or</div><div class="line">git rebase xxxx_branch 或者 git pull --rebase 时</div></pre></td></tr></table></figure></p>
<p>解消方法也是修改冲突文件并删除冲突标识&lt;&lt;&lt;&lt;&lt; ==== &gt;&gt;&gt;：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git rebase –<span class="built_in">continue</span>                 //继续更新到最新的base上</div></pre></td></tr></table></figure></p>
<p>over</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-下载代码&quot;&gt;&lt;a href=&quot;#1-下载代码&quot; class=&quot;headerlink&quot; title=&quot;1.下载代码&quot;&gt;&lt;/a&gt;1.下载代码&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; http//xxxx.git –b dev xxxx_dev_local&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://zengdh.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Gulp 配置（五）---图片篇</title>
    <link href="http://zengdh.com/2017/05/25/note5/"/>
    <id>http://zengdh.com/2017/05/25/note5/</id>
    <published>2017-05-25T02:50:44.876Z</published>
    <updated>2017-05-25T02:50:44.876Z</updated>
    
    <content type="html"><![CDATA[<p>图片整合成雪碧图，几kb的图片转化成base64写入css中，减少http请求。</p>
<h2 id="gulp-base64"><a href="#gulp-base64" class="headerlink" title="gulp-base64"></a>gulp-base64</h2><h4 id="需要引入的依赖"><a href="#需要引入的依赖" class="headerlink" title="需要引入的依赖"></a>需要引入的依赖</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var base64 = require(<span class="string">'gulp-base64'</span>);</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>新建一个task:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'base64'</span>, <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">    <span class="built_in">return</span> gulp.src(<span class="string">'./build/scss/*'</span>)</div><div class="line">        .pipe(base64(&#123;</div><div class="line">            baseDir: <span class="string">'./build/scss/'</span>,</div><div class="line">            extensions: [<span class="string">'svg'</span>, <span class="string">'png'</span>, /\.jpg<span class="comment">#datauri$/i],</span></div><div class="line">            exclude:    [/\.server\.(com|net)\/dynamic\//, <span class="string">'--live.jpg'</span>],</div><div class="line">            maxImageSize: 8*1024, // bytes </div><div class="line">            debug: <span class="literal">true</span></div><div class="line">        &#125;))</div><div class="line">        .pipe(gulp.dest(<span class="string">'./build/scss'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="gulp-css-spriter"><a href="#gulp-css-spriter" class="headerlink" title="gulp-css-spriter"></a>gulp-css-spriter</h2><h4 id="需要引入的依赖-1"><a href="#需要引入的依赖-1" class="headerlink" title="需要引入的依赖"></a>需要引入的依赖</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var spriter = require(<span class="string">'gulp-css-spriter'</span>);</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'mergeScss'</span>, [<span class="string">'cleanScss'</span>],<span class="function"><span class="title">function</span></span> ()&#123;</div><div class="line">        var timestamp = +new Date();</div><div class="line">        <span class="built_in">return</span> gulp.src([<span class="string">'./static/scss/*.scss'</span>])</div><div class="line">            .pipe(sass().on(<span class="string">'error'</span>, sass.logError))</div><div class="line">            .pipe(spriter(&#123;</div><div class="line">            // 生成的spriter的位置</div><div class="line">            <span class="string">'spriteSheet'</span>: <span class="string">'./build/img/sprite-'</span>+timestamp+<span class="string">'.png'</span>,</div><div class="line">            // 生成样式文件图片引用地址的路径</div><div class="line">            // 如下将生产：backgound:url(../images/sprite20324232.png)</div><div class="line">            <span class="string">'pathToSpriteSheetFromCSS'</span>: <span class="string">'../img/sprite-'</span>+timestamp+<span class="string">'.png'</span></div><div class="line">            &#125;))</div><div class="line">            .pipe(minifycss())</div><div class="line">            .pipe(rev())                                            //- 文件名加MD5后缀</div><div class="line">            .pipe(gulp.dest(<span class="string">'./build/scss/'</span>))</div><div class="line">            .pipe(rev.manifest())                                   //- 生成一个rev-manifest.json</div><div class="line">            .pipe(gulp.dest(<span class="string">'./rev'</span>))                              //- 将 rev-manifest.json 保存到 rev 目录内</div><div class="line">            .pipe(notify(&#123; message: <span class="string">'mergeScss task ok'</span> &#125;));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>css:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">.x&#123;width: 50px;height: 50px;background: url(../img/x.png?__spriter) 0 0 no-repeat;&#125;</div><div class="line">.y&#123;width: 50px;height: 50px;background: url(../img/y.png) 0 0 no-repeat;&#125;</div></pre></td></tr></table></figure></p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>gulp-css-spriter默认会对样式文件里，所有的background/background-image的图片合并，</p>
<p>但实际项目中，我们不是所有的图片都需要合并。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">background-image:url(../img/x.png?__spriter);//有?__spriter后缀的合并</div><div class="line"></div><div class="line">background-image:url(../img/y.png);//不合并</div></pre></td></tr></table></figure>
<p>修改gulp-css-spriter源文件<br>进入 node_modules\gulp-css-spriter\lib\map-over-styles-and-transform-background-image-declarations.js<br>第43行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(transformedDeclaration.property === <span class="string">'background-image'</span>) &#123;</div><div class="line">			<span class="built_in">return</span> cb(transformedDeclaration, declarationIndex, declarations);</div><div class="line">		&#125;</div><div class="line">		// Background is a shorthand property so make sure `url()` is <span class="keyword">in</span> there</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(transformedDeclaration.property === <span class="string">'background'</span>) &#123;</div><div class="line">			var hasImageValue = spriterUtil.backgroundURLRegex.test(transformedDeclaration.value);</div><div class="line"></div><div class="line">			<span class="keyword">if</span>(hasImageValue) &#123;</div><div class="line">				<span class="built_in">return</span> cb(transformedDeclaration, declarationIndex, declarations);</div><div class="line">			&#125;</div><div class="line">		&#125;</div></pre></td></tr></table></figure></p>
<p>更新为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(transformedDeclaration.property === <span class="string">'background-image'</span> &amp;&amp; /\?__spriter/i.test(transformedDeclaration.value)) &#123;</div><div class="line"></div><div class="line">                    transformedDeclaration.value = transformedDeclaration.value.replace(<span class="string">'?__spriter'</span>,<span class="string">''</span>);</div><div class="line">                    <span class="built_in">return</span> cb(transformedDeclaration, declarationIndex, declarations);</div><div class="line">                &#125;</div><div class="line">                // Background is a shorthand property so make sure `url()` is <span class="keyword">in</span> there 且判断url是否有?__spriter后缀</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(transformedDeclaration.property === <span class="string">'background'</span> &amp;&amp; /\?__spriter/i.test(transformedDeclaration.value)) &#123;</div><div class="line"></div><div class="line">                    transformedDeclaration.value = transformedDeclaration.value.replace(<span class="string">'?__spriter'</span>,<span class="string">''</span>);</div><div class="line">                    var hasImageValue = spriterUtil.backgroundURLRegex.test(transformedDeclaration.value);</div><div class="line"></div><div class="line">                    <span class="keyword">if</span>(hasImageValue) &#123;</div><div class="line">                        <span class="built_in">return</span> cb(transformedDeclaration, declarationIndex, declarations);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div></pre></td></tr></table></figure></p>
<p>over</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;图片整合成雪碧图，几kb的图片转化成base64写入css中，减少http请求。&lt;/p&gt;
&lt;h2 id=&quot;gulp-base64&quot;&gt;&lt;a href=&quot;#gulp-base64&quot; class=&quot;headerlink&quot; title=&quot;gulp-base64&quot;&gt;&lt;/a&gt;gulp-base64&lt;/h2&gt;&lt;h4 id=&quot;需要引入的依赖&quot;&gt;&lt;a href=&quot;#需要引入的依赖&quot; class=&quot;headerlink&quot; title=&quot;需要引入的依赖&quot;&gt;&lt;/a&gt;需要引入的依赖&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var base64 = require(&lt;span class=&quot;string&quot;&gt;&#39;gulp-base64&#39;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="base64" scheme="http://zengdh.com/tags/base64/"/>
    
      <category term="spriter" scheme="http://zengdh.com/tags/spriter/"/>
    
  </entry>
  
  <entry>
    <title>Gulp 配置（四）---模板篇</title>
    <link href="http://zengdh.com/2017/05/25/note4/"/>
    <id>http://zengdh.com/2017/05/25/note4/</id>
    <published>2017-05-25T02:50:44.876Z</published>
    <updated>2017-05-25T02:50:44.876Z</updated>
    
    <content type="html"><![CDATA[<p>提取公共html页面为实际开发提供了便捷，这里引入gulp-file-include做公共模块复用。</p>
<h2 id="gulp-file-include"><a href="#gulp-file-include" class="headerlink" title="gulp-file-include"></a>gulp-file-include</h2><h4 id="需要引入的依赖"><a href="#需要引入的依赖" class="headerlink" title="需要引入的依赖"></a>需要引入的依赖</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var fileinclude  = require(<span class="string">'gulp-file-include'</span>);</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>新建一个task:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'fileinclude'</span>, <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">    // 适配src中所有文件夹下的所有html，排除src下的include文件夹中html</div><div class="line">    gulp.src([<span class="string">'./src/view/*.html'</span>,<span class="string">'!./src/view/common/*.html'</span>])</div><div class="line">        .pipe(fileinclude(&#123;</div><div class="line">          prefix: <span class="string">'@@'</span>,</div><div class="line">          basepath: <span class="string">'@file'</span></div><div class="line">        &#125;))</div><div class="line">    .pipe(gulp.dest(<span class="string">'./build/view/'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>gulp task已经写好了，这里新建两个公共html页面，header.html和footer.html</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">header.html</div><div class="line">&lt;div&gt;这是头部&lt;/div&gt;</div><div class="line"></div><div class="line">footer.html</div><div class="line">&lt;div&gt;这是页脚&lt;/div&gt;</div></pre></td></tr></table></figure>
<h2 id="引入公共组件"><a href="#引入公共组件" class="headerlink" title="引入公共组件"></a>引入公共组件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@@include(<span class="string">'common/header.html'</span>)</div><div class="line">   &lt;div&gt;主内容&lt;/div&gt;</div><div class="line">@@include(<span class="string">'common/footer.html'</span>)</div></pre></td></tr></table></figure>
<h2 id="编译后生产环境下的html"><a href="#编译后生产环境下的html" class="headerlink" title="编译后生产环境下的html"></a>编译后生产环境下的html</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;这是头部&lt;/div&gt;</div><div class="line">&lt;div&gt;主内容&lt;/div&gt;</div><div class="line">&lt;div&gt;这是页脚&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>至此完成了html模板复用，结合上一章的自动刷新，更新下watch，将fileinclude放入watch中监听html，并刷新<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'watch'</span>, <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">  gulp.watch(paths.html,[<span class="string">'fileinclude'</span>,<span class="string">'html'</span>]);</div><div class="line">  gulp.watch(paths.scripts,[<span class="string">'mergeScripts'</span>,<span class="string">'html'</span>]);</div><div class="line">  gulp.watch(paths.scss,[<span class="string">'mergeScss'</span>,<span class="string">'html'</span>]);</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>over</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;提取公共html页面为实际开发提供了便捷，这里引入gulp-file-include做公共模块复用。&lt;/p&gt;
&lt;h2 id=&quot;gulp-file-include&quot;&gt;&lt;a href=&quot;#gulp-file-include&quot; class=&quot;headerlink&quot; title=&quot;gulp-file-include&quot;&gt;&lt;/a&gt;gulp-file-include&lt;/h2&gt;&lt;h4 id=&quot;需要引入的依赖&quot;&gt;&lt;a href=&quot;#需要引入的依赖&quot; class=&quot;headerlink&quot; title=&quot;需要引入的依赖&quot;&gt;&lt;/a&gt;需要引入的依赖&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var fileinclude  = require(&lt;span class=&quot;string&quot;&gt;&#39;gulp-file-include&#39;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="gulp" scheme="http://zengdh.com/tags/gulp/"/>
    
      <category term="gulp-file-include" scheme="http://zengdh.com/tags/gulp-file-include/"/>
    
  </entry>
  
  <entry>
    <title>Gulp 配置（三）---service篇</title>
    <link href="http://zengdh.com/2017/05/25/note3/"/>
    <id>http://zengdh.com/2017/05/25/note3/</id>
    <published>2017-05-25T02:50:44.875Z</published>
    <updated>2017-05-25T02:50:44.875Z</updated>
    
    <content type="html"><![CDATA[<p>实际开发中，如果每次修改html、sass、js都要手动去执行编译命令，这将是一件很痛苦的事，所以配置一个本地服务，让它实时编译刷新是很必要的。</p>
<h2 id="gulp-connect"><a href="#gulp-connect" class="headerlink" title="gulp-connect"></a>gulp-connect</h2><h4 id="需要引入的依赖"><a href="#需要引入的依赖" class="headerlink" title="需要引入的依赖"></a>需要引入的依赖</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var connect = require(<span class="string">'gulp-connect'</span>);</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>新建一个task:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'connect'</span>, <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">    connect.server(&#123;</div><div class="line">       // host: <span class="string">'192.168.x.x'</span>, //地址，可不写，不写的话，默认localhost</div><div class="line">        port: 3000, //端口号，可不写，默认8000</div><div class="line">        root: <span class="string">'./'</span>, //当前项目主目录</div><div class="line">        livereload: <span class="literal">true</span> //自动刷新</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>这样就能在本地启一个服务了，但是这样还不够，我们需要去监听项目的文件是否发生更改，如果有更改就自动去编译，这里需要用到gulp-watch</p>
<h2 id="gulp-watch"><a href="#gulp-watch" class="headerlink" title="gulp-watch"></a>gulp-watch</h2><p>引入依赖<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var sass = require(<span class="string">'gulp-watch'</span>);</div></pre></td></tr></table></figure></p>
<p>新建一个task</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var paths = &#123;</div><div class="line">  scripts: [<span class="string">'./src/js/*.js'</span>],</div><div class="line">  scss: <span class="string">'./src/scss/*.scss'</span>,</div><div class="line">&#125;;</div><div class="line">gulp.task(<span class="string">'watch'</span>, <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">  gulp.watch(paths.scripts,[<span class="string">'mergeScripts'</span>]);</div><div class="line">  gulp.watch(paths.scss,[<span class="string">'mergeScss'</span>]);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>用watch去监听文件，当js和css发生变化时自动编译生成，但是每次都需要按F5才能更新页面，这里再写一个task去自动刷新页面，毕竟我这么懒，F5也懒得去按。</p>
<p>再新建一个task<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'html'</span>, <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">    <span class="built_in">return</span> gulp.src(<span class="string">'./build/view/*.html'</span>)//这里的路径时生产文件的路径</div><div class="line">        .pipe(connect.reload());</div><div class="line">&#125;);</div><div class="line"></div><div class="line">注：task里要加<span class="built_in">return</span>，不加<span class="built_in">return</span>，task和里面的gulp流是异步执行的。</div></pre></td></tr></table></figure></p>
<p>将它放入watch中<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gulp.watch(paths.html,[<span class="string">'html'</span>]);</div><div class="line">gulp.watch(paths.scripts,[<span class="string">'mergeScripts'</span>,<span class="string">'html'</span>]);</div><div class="line">gulp.watch(paths.scss,[<span class="string">'mergeScss'</span>,<span class="string">'html'</span>]);</div></pre></td></tr></table></figure></p>
<p>这样就可以在修改源文件的同时，让gulp去自动生成需要的生产文件，这里再合并一下task，丢在一个task里面，方便使用</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'service'</span>, [<span class="string">'connect'</span>, <span class="string">'watch'</span>]);</div></pre></td></tr></table></figure>
<h2 id="http-proxy-middleware-代理跨域"><a href="#http-proxy-middleware-代理跨域" class="headerlink" title="http-proxy-middleware 代理跨域"></a>http-proxy-middleware 代理跨域</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'proxy'</span>, <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">    connect.server(&#123;</div><div class="line">        root: [<span class="string">'./'</span>],</div><div class="line">        port: 3000,</div><div class="line">        livereload: <span class="literal">true</span>,</div><div class="line">        middleware: <span class="keyword">function</span>(connect, opt) &#123;</div><div class="line">            <span class="built_in">return</span> [</div><div class="line">                proxy(<span class="string">'/api'</span>,  &#123;</div><div class="line">                    target: <span class="string">'http://localhost:8080'</span>,</div><div class="line">                    changeOrigin:<span class="literal">true</span></div><div class="line">                &#125;),</div><div class="line">                proxy(<span class="string">'/otherServer'</span>, &#123;</div><div class="line">                    target: <span class="string">'http://IP:Port'</span>,</div><div class="line">                    changeOrigin:<span class="literal">true</span></div><div class="line">                &#125;)</div><div class="line">            ]</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>over</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实际开发中，如果每次修改html、sass、js都要手动去执行编译命令，这将是一件很痛苦的事，所以配置一个本地服务，让它实时编译刷新是很必要的。&lt;/p&gt;
&lt;h2 id=&quot;gulp-connect&quot;&gt;&lt;a href=&quot;#gulp-connect&quot; class=&quot;headerlink&quot; title=&quot;gulp-connect&quot;&gt;&lt;/a&gt;gulp-connect&lt;/h2&gt;&lt;h4 id=&quot;需要引入的依赖&quot;&gt;&lt;a href=&quot;#需要引入的依赖&quot; class=&quot;headerlink&quot; title=&quot;需要引入的依赖&quot;&gt;&lt;/a&gt;需要引入的依赖&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var connect = require(&lt;span class=&quot;string&quot;&gt;&#39;gulp-connect&#39;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="gulp" scheme="http://zengdh.com/tags/gulp/"/>
    
      <category term="gulp-watch" scheme="http://zengdh.com/tags/gulp-watch/"/>
    
      <category term="gulp-connect" scheme="http://zengdh.com/tags/gulp-connect/"/>
    
  </entry>
  
  <entry>
    <title>Gulp 配置（二）---sass篇</title>
    <link href="http://zengdh.com/2017/05/25/note2/"/>
    <id>http://zengdh.com/2017/05/25/note2/</id>
    <published>2017-05-25T02:50:44.874Z</published>
    <updated>2017-05-25T02:50:44.875Z</updated>
    
    <content type="html"><![CDATA[<p>sass、less、stylus都是css预处理框架，它可以提高开发效率，编写富有表现力的、动态的、健壮的CSS。</p>
<ul>
<li>这里选择sass</li>
</ul>
<h2 id="gulp-css-task"><a href="#gulp-css-task" class="headerlink" title="gulp css task"></a>gulp css task</h2><h4 id="需要引入的依赖"><a href="#需要引入的依赖" class="headerlink" title="需要引入的依赖"></a>需要引入的依赖</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var minifycss = require(<span class="string">'gulp-minify-css'</span>), //压缩css</div><div class="line">    rev = require(<span class="string">'gulp-rev'</span>);                                  //- 对文件名加MD5后缀</div></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'mergeCss'</span>,[<span class="string">'cleanCss'</span>], <span class="function"><span class="title">function</span></span>() &#123;                                //- 创建一个名为 mergeCss 的 task</div><div class="line">        <span class="built_in">return</span> gulp.src([<span class="string">'./src/css/*.css'</span>])    //- 需要处理的css文件，放到一个字符串数组里</div><div class="line">            //.pipe(concat(*))   //- 合并后的文件名</div><div class="line">            .pipe(minifycss())          //- 压缩处理成一行</div><div class="line">            .pipe(rev())                                            //- 文件名加MD5后缀</div><div class="line">            .pipe(gulp.dest(<span class="string">'./build/css/'</span>))   //- 输出文件本地*/</div><div class="line">            .pipe(rev.manifest())                                   //- 生成一个rev-manifest.json</div><div class="line">            .pipe(gulp.dest(<span class="string">'./rev'</span>));                              //- 将 rev-manifest.json 保存到 rev 目录内</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>普通css文件的gulp task任务，主要是css压缩+MD5时间戳+HTML路径更换</p>
<h2 id="sass"><a href="#sass" class="headerlink" title="sass"></a>sass</h2><p>在开发过程中，sass需要编译才能使用，可以用命令行编译，gui编译（推荐koala），编辑器编译，在线编译等等，这里我结合gulp引入gulp-sass来编译。<br>sass文件后缀分两种，scss和sass，一个使用{}，一个不使用，我选择scss，可读性高一些。</p>
<h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var sass = require(<span class="string">'gulp-sass'</span>);</div></pre></td></tr></table></figure>
<h4 id="task任务"><a href="#task任务" class="headerlink" title="task任务"></a>task任务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'mergeScss'</span>, [<span class="string">'cleanScss'</span>],<span class="function"><span class="title">function</span></span> ()&#123;</div><div class="line">        <span class="built_in">return</span> gulp.src([<span class="string">'./src/scss/*.scss'</span>])</div><div class="line">            .pipe(sass().on(<span class="string">'error'</span>, sass.logError))</div><div class="line">            .pipe(rev())                                            //- 文件名加MD5后缀</div><div class="line">            .pipe(gulp.dest(<span class="string">'./build/scss/'</span>))</div><div class="line">            .pipe(rev.manifest())                                   //- 生成一个rev-manifest.json</div><div class="line">            .pipe(gulp.dest(<span class="string">'./rev'</span>));                              //- 将 rev-manifest.json 保存到 rev 目录内</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这里编译后的css文件名是通过原文件名和md5以连字符形式命名的（例：a-f7e3d6869b.css），每次修改css后生成的文件名都不一样，需要清除原有的旧文件，否则会堆积很多没用的css，我更喜欢在html中引入css时在路径后面加‘?v={time}’的形式，这里我选择去修改node_modules里面的js文件来满足我的需求。</p>
<h2 id="打开-node-modules-gulp-rev-index-js"><a href="#打开-node-modules-gulp-rev-index-js" class="headerlink" title="打开 node_modules\gulp-rev\index.js"></a>打开 node_modules\gulp-rev\index.js</h2><p>第144行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">manifest[originalFile] = revisionedFile;</div></pre></td></tr></table></figure></p>
<p>更新为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">manifest[originalFile] = originalFile + <span class="string">'?v='</span> + file.revHash; //file.revHash是md5字符串，可以换成new Date().getTime()来获取当前时间的毫秒戳</div></pre></td></tr></table></figure></p>
<h2 id="打开-nodemodules-gulp-rev-nodemodules-rev-path-index-js"><a href="#打开-nodemodules-gulp-rev-nodemodules-rev-path-index-js" class="headerlink" title="打开 nodemodules\gulp-rev\nodemodules\rev-path\index.js"></a>打开 nodemodules\gulp-rev\nodemodules\rev-path\index.js</h2><p>第10行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">return</span> filename + <span class="string">'-'</span> + <span class="built_in">hash</span> + ext;</div></pre></td></tr></table></figure></p>
<p>更新为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">return</span> filename + ext;</div></pre></td></tr></table></figure></p>
<h2 id="打开-node-modules-gulp-rev-collector-index-js"><a href="#打开-node-modules-gulp-rev-collector-index-js" class="headerlink" title="打开 node_modules\gulp-rev-collector\index.js"></a>打开 node_modules\gulp-rev-collector\index.js</h2><p>第31行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ( !_.isString(json[key]) || path.basename(json[key]).replace(new RegExp( opts.revSuffix ), <span class="string">''</span> ) !==  path.basename(key) ) &#123;</div></pre></td></tr></table></figure></p>
<p>更新为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ( path.basename(json[key]).split(<span class="string">'?'</span>)[0] !== path.basename(key) ) &#123;</div></pre></td></tr></table></figure></p>
<p>第46行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">return</span> pattern.replace(/[\-\[\]\&#123;\&#125;\(\)\*\+\?\.\^\$\|\/\\]/g, <span class="string">"\\$&amp;"</span>);</div></pre></td></tr></table></figure></p>
<p>更新为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var rp = pattern.replace(/[\-\[\]\&#123;\&#125;\(\)\*\+\?\.\^\$\|\/\\]/g, <span class="string">"\\$&amp;"</span>);</div><div class="line">rp = pattern + <span class="string">"(\\?v=(\\d|[a-z])&#123;8,10&#125;)*"</span>; //匹配md5</div><div class="line">//rp = pattern + <span class="string">"(\\?v=(\\d&#123;13&#125;))*"</span>; 匹配后缀为毫秒戳</div><div class="line"><span class="built_in">return</span> rp;</div></pre></td></tr></table></figure></p>
<h2 id="路径替换"><a href="#路径替换" class="headerlink" title="路径替换"></a>路径替换</h2><p>引入依赖<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var revCollector = require(<span class="string">'gulp-rev-collector'</span>);</div></pre></td></tr></table></figure></p>
<p>gulp task</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'scssrev'</span>,[<span class="string">'mergeScss'</span>],<span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">  <span class="built_in">return</span> gulp.src( [<span class="string">'./rev/*.json'</span>,<span class="string">'./build/view/*.html'</span>])                                    //- 读取 rev-manifest.json 文件以及需要进行css名替换的文件</div><div class="line">               .pipe(revCollector(</div><div class="line">                   &#123;</div><div class="line">                    replaceReved: <span class="literal">true</span></div><div class="line">                    /*dirReplacements: &#123;//指定路径替换</div><div class="line">                        <span class="string">'/static/scss'</span>: <span class="string">'/build/scss'</span></div><div class="line">                    &#125;*/</div><div class="line">                   &#125;</div><div class="line">                ))                                   //- 执行文件内css名的替换</div><div class="line">               .pipe(gulp.dest(<span class="string">"./build/view/"</span>));                   //- 替换后的文件输出的目录    </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>最后这些编译后的css文件会以*.css?v={time}的形式引入，解决浏览器缓存机制。</p>
<h2 id="gulp-px3rem"><a href="#gulp-px3rem" class="headerlink" title="gulp-px3rem"></a>gulp-px3rem</h2><p>px单位转换成rem<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.pipe(px2rem())</div><div class="line"></div><div class="line">px2rem(&#123;</div><div class="line">  baseDpr: 2,             // 基本设备像素比（默认值：2）</div><div class="line">  threeVersion: <span class="literal">false</span>,    // 是否产生“1X，2X和@ @ 3x版本（默认：<span class="literal">false</span>）</div><div class="line">  remVersion: <span class="literal">true</span>,       // 是否生成rem版本（默认值：<span class="literal">true</span>）</div><div class="line">  remUnit: 75,            // 转化基值（默认：75）</div><div class="line">  remPrecision: 6         // rem 精确度 (默认: 6)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>默认生成的css文件名格式为*.debug.css，去掉debug可以在对应的node_modules里面的index.js修改正则表达式，去掉debug就可以了。</p>
<p>over</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;sass、less、stylus都是css预处理框架，它可以提高开发效率，编写富有表现力的、动态的、健壮的CSS。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这里选择sass&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;gulp-css-task&quot;&gt;&lt;a href=&quot;#gulp-css-task&quot; class=&quot;headerlink&quot; title=&quot;gulp css task&quot;&gt;&lt;/a&gt;gulp css task&lt;/h2&gt;&lt;h4 id=&quot;需要引入的依赖&quot;&gt;&lt;a href=&quot;#需要引入的依赖&quot; class=&quot;headerlink&quot; title=&quot;需要引入的依赖&quot;&gt;&lt;/a&gt;需要引入的依赖&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var minifycss = require(&lt;span class=&quot;string&quot;&gt;&#39;gulp-minify-css&#39;&lt;/span&gt;), //压缩css&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    rev = require(&lt;span class=&quot;string&quot;&gt;&#39;gulp-rev&#39;&lt;/span&gt;);                                  //- 对文件名加MD5后缀&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="gulp" scheme="http://zengdh.com/tags/gulp/"/>
    
      <category term="css" scheme="http://zengdh.com/tags/css/"/>
    
      <category term="sass" scheme="http://zengdh.com/tags/sass/"/>
    
      <category term="px3rem" scheme="http://zengdh.com/tags/px3rem/"/>
    
  </entry>
  
  <entry>
    <title>Gulp 配置（一）---seaJs篇</title>
    <link href="http://zengdh.com/2017/05/25/note/"/>
    <id>http://zengdh.com/2017/05/25/note/</id>
    <published>2017-05-25T02:50:44.874Z</published>
    <updated>2017-05-25T02:50:44.874Z</updated>
    
    <content type="html"><![CDATA[<p>Gulp.js 是基于 Node.js 构建的，可以建项目并减少频繁的 IO 操作的化构建工具<br>这里我采用 <a href="http://seajs.org/" target="_blank">seajs</a>来管理我的javascript代码，提高JavaScript代码的可读性和清晰度，解决目前JavaScript编程中普遍存在的依赖关系混乱和代码纠缠等问题，方便代码的编写和维护。</p>
<ul>
<li>gulp安装就不赘述</li>
</ul>
<h2 id="引入seajs"><a href="#引入seajs" class="headerlink" title="引入seajs"></a>引入seajs</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"../../src/js/sea.js"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="配置seajs"><a href="#配置seajs" class="headerlink" title="配置seajs"></a>配置seajs</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">seajs.config(&#123;</div><div class="line">	 paths: &#123;</div><div class="line">             <span class="string">'src'</span>: <span class="string">'../../src/'</span>  //路径配置</div><div class="line">	 &#125;,</div><div class="line">         <span class="built_in">alias</span>: &#123;//别名配置</div><div class="line">             jquery:<span class="string">'jquery.js'</span>,</div><div class="line">             index:<span class="string">'src/js/index.js'</span></div><div class="line">         &#125;,</div><div class="line">         map: [//映射配置</div><div class="line">	     [ /^(.*\.(?:css|js))(.*)$/i, <span class="string">'$1?201703281819'</span> ]</div><div class="line">	 ],</div><div class="line">	 preload: [<span class="string">'jquery'</span>]  // 预加载项</div><div class="line">	 &#125;);</div><div class="line">seajs.use([<span class="string">"jquery"</span>,<span class="string">"index"</span>]);  //模块加载</div></pre></td></tr></table></figure>
<p><a href="http://yslove.net/seajs/" target="_blank">更多配置项&gt;&gt;</a></p>
<h2 id="新建两个js文件a-js和b-js"><a href="#新建两个js文件a-js和b-js" class="headerlink" title="新建两个js文件a.js和b.js"></a>新建两个js文件a.js和b.js</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">a.js:</div><div class="line">define(<span class="keyword">function</span>(require, exports, module) &#123;</div><div class="line">	var AJS=&#123;</div><div class="line">        init:<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line"></div><div class="line">        &#125;,</div><div class="line">        aDom:<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">        	console.log(<span class="string">'来自a.js的内容'</span>);</div><div class="line">        &#125;</div><div class="line">	&#125;;</div><div class="line">	module.exports=AJS;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">b.js:</div><div class="line">define(<span class="keyword">function</span>(require, exports, module) &#123;</div><div class="line">	var BJS=&#123;</div><div class="line">        init:<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line"></div><div class="line">        &#125;,</div><div class="line">        aDom:<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">        	console.log(<span class="string">'来自b.js的内容'</span>);</div><div class="line">        &#125;</div><div class="line">	&#125;;</div><div class="line">	module.exports=BJS;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="index-js引入a-js和b-js的方法"><a href="#index-js引入a-js和b-js的方法" class="headerlink" title="index.js引入a.js和b.js的方法"></a>index.js引入a.js和b.js的方法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">define(<span class="keyword">function</span>(require, exports, module) &#123;</div><div class="line">        var AJS=require(<span class="string">'a'</span>);</div><div class="line">        var BJS=require(<span class="string">'b'</span>);</div><div class="line">	var INDEX=&#123;</div><div class="line">        init:<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">            console.log(<span class="string">'来自index.js的内容'</span>);</div><div class="line">            AJS.aDom();</div><div class="line">            BJS.bDom();</div><div class="line">        &#125;</div><div class="line">	&#125;;</div><div class="line">	module.exports=INDEX.init();</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="打开引入index-js的html文件"><a href="#打开引入index-js的html文件" class="headerlink" title="打开引入index.js的html文件"></a>打开引入index.js的html文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">seajs.use([<span class="string">"index"</span>]); //引入index.js</div></pre></td></tr></table></figure>
<p><img src="/img/img1.png"></p>
<p>这里可以看到index.js中成功引入了a.js和b.js的方法，再看一下Network<br><img src="/img/img2.png"><br>这边加载了三个js文件，这并不符合我的需求，我希望我引入某个js文件的方法时，只需要加载那个方法，而不是整个js文件都加载进来，所以我需要合并js，添加一个gulp task任务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'mergeScripts'</span>,<span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">        <span class="built_in">return</span> gulp.src([<span class="string">'./src/js/a.js'</span>,<span class="string">'./src/js/b.js'</span>,<span class="string">'./src/js/index.js'</span>])    </div><div class="line">            .pipe(uglify(&#123;//压缩js</div><div class="line">             mangle: <span class="literal">true</span>,//类型：Boolean 默认：<span class="literal">true</span> 是否修改变量名</div><div class="line">             mangle: &#123; except: [<span class="string">'require'</span>, <span class="string">'exports'</span>, <span class="string">'module'</span>, <span class="string">'$'</span>] &#125;//排除混淆关键字</div><div class="line">             &#125;))</div><div class="line">            .pipe(concat(<span class="string">'index.js'</span>))  //生成js</div><div class="line">            .pipe(gulp.dest(<span class="string">'./build/js/'</span>));  //生成合并后的js的路径   </div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp mergeScripts</div></pre></td></tr></table></figure>
<p><img src="/img/img3.png"><br>合并是合并了，但是还是加载了三个js<br>这里需要引入gulp-seajs-transport来具象化js模块<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> transport = <span class="built_in">require</span>(<span class="string">'gulp-seajs-transport'</span>);</div><div class="line">.pipe(transport());</div></pre></td></tr></table></figure></p>
<p><img src="/img/img4.png"><br>完成，既加载了我所需要的方法，又减少了http请求<br>over</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Gulp.js 是基于 Node.js 构建的，可以建项目并减少频繁的 IO 操作的化构建工具&lt;br&gt;这里我采用 &lt;a href=&quot;http://seajs.org/&quot; target=&quot;_blank&quot;&gt;seajs&lt;/a&gt;来管理我的javascript代码，提高JavaScript代码的可读性和清晰度，解决目前JavaScript编程中普遍存在的依赖关系混乱和代码纠缠等问题，方便代码的编写和维护。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gulp安装就不赘述&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;引入seajs&quot;&gt;&lt;a href=&quot;#引入seajs&quot; class=&quot;headerlink&quot; title=&quot;引入seajs&quot;&gt;&lt;/a&gt;引入seajs&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;script &lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; src=&lt;span class=&quot;string&quot;&gt;&quot;../../src/js/sea.js&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="gulp" scheme="http://zengdh.com/tags/gulp/"/>
    
      <category term="seajs" scheme="http://zengdh.com/tags/seajs/"/>
    
      <category term="gulp-seajs-transport" scheme="http://zengdh.com/tags/gulp-seajs-transport/"/>
    
  </entry>
  
</feed>
