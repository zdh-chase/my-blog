<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>博博博客</title>
  <subtitle>念曲的个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zengdh.com/"/>
  <updated>2017-06-16T07:00:13.230Z</updated>
  <id>http://zengdh.com/</id>
  
  <author>
    <name>念曲</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>日常踩坑笔记本</title>
    <link href="http://zengdh.com/2017/06/16/note10/"/>
    <id>http://zengdh.com/2017/06/16/note10/</id>
    <published>2017-06-16T02:45:15.024Z</published>
    <updated>2017-06-16T07:00:13.230Z</updated>
    
    <content type="html"><![CDATA[<p>记录日常开发各种坑坑洼洼，吾日三省吾身….</p>
<a id="more"></a>
<h2 id="1-IE8、IE9-ajax跨域不发起请求"><a href="#1-IE8、IE9-ajax跨域不发起请求" class="headerlink" title="1.IE8、IE9  ajax跨域不发起请求"></a>1.IE8、IE9  ajax跨域不发起请求</h2><p>W3C CORS（跨域资源共享）是对于跨域请求的一个规范，目前各个主流浏览器都实现了这个规范，IE8开始，增加了XDomainRequest作为跨域请求的对象，而Firefox与Chrom则CORS直接实现在XMLHttpRequest对象中，更方便使用。不过IE10中，XMLHttpRequest对象也实现了CORS。</p>
<p>XDomainRequest:<br>1.仅只是 GET 和 POST 两个方法。<br>2.支持的事件有：onerror，onload，onprogress，ontimeout<br>3.提供的方法：abort，open，send<br>4.提供的属性：contentType， responseText，timeout</p>
<p>demo:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">var url = <span class="string">'xxxxxxxxx'</span>;</div><div class="line">var xdr = new XDomainRequest();</div><div class="line">xdr.onload = <span class="function"><span class="title">function</span></span>() &#123;           </div><div class="line">    console.log(xdr.responseText);</div><div class="line">&#125;;</div><div class="line">xdr.onerror = <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">    console.log(<span class="string">"error"</span>);</div><div class="line">&#125;;</div><div class="line"> </div><div class="line">xdr.timeout = 3000;</div><div class="line">xdr.ontimeout = <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">    console.log(<span class="string">"timeout"</span>);</div><div class="line">&#125;;</div><div class="line"> </div><div class="line">xdr.open(<span class="string">"get"</span>, url);</div><div class="line">xdr.send();</div><div class="line"></div><div class="line">//兼容处理</div><div class="line"><span class="keyword">if</span> (window.XDomainRequest) &#123;</div><div class="line">  </div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (window.XMLHttpRequest) &#123;</div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="2-IE10以下高德api接口返回数据未知错误"><a href="#2-IE10以下高德api接口返回数据未知错误" class="headerlink" title="2.IE10以下高德api接口返回数据未知错误"></a>2.IE10以下高德api接口返回数据未知错误</h2><p>高德地图api接口<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://restapi.amap.com/v3/geocode/geo?key=&lt;您的key&gt;&amp;address=杭州</div></pre></td></tr></table></figure></p>
<p>但在ie10以下返回的结果时未知错误。。查阅高德地图文档错误后，给出的反馈是传参时中文字符进行url编码转换<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">'https://restapi.amap.com/v3/geocode/geo?key=&lt;您的key&gt;&amp;address='</span> + encodeURI(地址)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录日常开发各种坑坑洼洼，吾日三省吾身….&lt;/p&gt;
    
    </summary>
    
    
      <category term="坑坑洼洼踩踩踩" scheme="http://zengdh.com/tags/%E5%9D%91%E5%9D%91%E6%B4%BC%E6%B4%BC%E8%B8%A9%E8%B8%A9%E8%B8%A9/"/>
    
  </entry>
  
  <entry>
    <title>初探mongodb（二）</title>
    <link href="http://zengdh.com/2017/06/02/note9/"/>
    <id>http://zengdh.com/2017/06/02/note9/</id>
    <published>2017-06-02T07:53:27.165Z</published>
    <updated>2017-06-02T09:29:31.079Z</updated>
    
    <content type="html"><![CDATA[<p>mongodb安装完成后，开始实战操作，这里使用express框架和mongodb可视化工具Robomongo一起搭配使用。</p>
<a id="more"></a>
<h2 id="1-安装express"><a href="#1-安装express" class="headerlink" title="1.安装express"></a>1.安装express</h2><p>npm安装太慢，推荐cnpm,使用淘宝镜像<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure></p>
<p>全局安装：cnpm install -g express<br>项目范围内安装： cnpm install express –save</p>
<p>安装完express，在项目根目录新建app.js<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var express = require(<span class="string">'express'</span>);</div><div class="line">var app = express();</div><div class="line"></div><div class="line">app.get(<span class="string">'/'</span>, <span class="keyword">function</span> (req, res) &#123;</div><div class="line">  res.send(<span class="string">'Hello World!'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">var server = app.listen(3000, <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">  var host = server.address().address;</div><div class="line">  var port = server.address().port;</div><div class="line"></div><div class="line">  console.log(<span class="string">'Example app listening at http://%s:%s'</span>, host, port);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>打开cmd，cd至项目目录，启动node app.js即可运行服务</p>
<h2 id="2-可视化工具Robomongo"><a href="#2-可视化工具Robomongo" class="headerlink" title="2.可视化工具Robomongo"></a>2.可视化工具Robomongo</h2><p><a href="https://robomongo.org/" target="_blank">官网传送门</a><br>下载安装完成后，打开Robomongo<br><img src="/img/img8.png"><br>点击Create,输入Name，以及Address，端口默认为27017，地址Address和端口号一般不用更改。<br><img src="/img/img9.png"><br>这样名为test的mongodb连接创建完毕。</p>
<h2 id="3-MongoDB和MySQL"><a href="#3-MongoDB和MySQL" class="headerlink" title="3.MongoDB和MySQL"></a>3.MongoDB和MySQL</h2><p><img src="/img/img10.png"></p>
<h2 id="4-创建数据库"><a href="#4-创建数据库" class="headerlink" title="4.创建数据库"></a>4.创建数据库</h2><p><img src="/img/img11.png"><img src="/img/img12.png"><br>这里取名testDB,右键testDB下的collection新建表<br><img src="/img/img13.png"><br>这样一张表就建好了，然后往表里添加字段和数据，右键表名点击insert documet<br>MongoDB数据库中文档(每一行的数据)的数据结构和JSON基本一样，所有存储在集合中的数据都是BSON格式，BSON是一种类JSON的一种二进制形式的存储格式，简称Binary JSON。因此，我们在插入数据时，只要像JSON格式那样输入我们想要插入的数据。点击save保存即可成功插入数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    userName:<span class="string">'zdh'</span>,</div><div class="line">    age:18,</div><div class="line">    sex:<span class="string">'男'</span>,</div><div class="line">    job:<span class="string">'前端'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>点击save即可保存至表中：<br><img src="/img/img14.png"></p>
<h2 id="5-连接数据库"><a href="#5-连接数据库" class="headerlink" title="5.连接数据库"></a>5.连接数据库</h2><p>使用MongoDB原生自带的API来创建连接，直接在app.js输入以下代码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">var MongoClient = require(<span class="string">'mongodb'</span>).MongoClient,</div><div class="line">    DB_CONN_STR = <span class="string">'mongodb://localhost:27017/testDB'</span>; //数据库为 <span class="built_in">test</span>DB</div><div class="line">var selectData = <span class="keyword">function</span>(db, callback) &#123;  </div><div class="line">  //连接到user表  </div><div class="line">  var collection = db.collection(<span class="string">'user'</span>);</div><div class="line">  //查询数据</div><div class="line">  var <span class="built_in">where</span>Str = &#123;<span class="string">"userName"</span>:<span class="string">'zdh'</span>&#125;;</div><div class="line">  collection.find(<span class="built_in">where</span>Str).toArray(<span class="keyword">function</span>(err, result) &#123;</div><div class="line">    <span class="keyword">if</span>(err)</div><div class="line">    &#123;</div><div class="line">      console.log(<span class="string">'Error:'</span>+ err);</div><div class="line">      <span class="built_in">return</span>;</div><div class="line">    &#125;     </div><div class="line">    callback(result);</div><div class="line">  &#125;);</div><div class="line">&#125; </div><div class="line">MongoClient.connect(DB_CONN_STR, <span class="keyword">function</span>(err, db) &#123;</div><div class="line">  console.log(<span class="string">"连接成功！"</span>);</div><div class="line">  selectData(db, <span class="keyword">function</span>(result) &#123;</div><div class="line">    console.log(result);</div><div class="line">    db.close();</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="6-使用Mongoose连接数据库"><a href="#6-使用Mongoose连接数据库" class="headerlink" title="6.使用Mongoose连接数据库"></a>6.使用Mongoose连接数据库</h2><p>除了使用MongoDB原生自带的API来创建连接外，也可以使用Mongoose配合操作，mongoose文档（<a href="http://www.nodeclass.com/api/mongoose.html" target="_blank">传送门</a>）</p>
<p>app.js中使用mongoose:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">const pkg = require(<span class="string">'./package'</span>)</div><div class="line">const express = require(<span class="string">'express'</span>)</div><div class="line">const bodyParser = require(<span class="string">'body-parser'</span>)</div><div class="line">const mongoose = require(<span class="string">'mongoose'</span>)</div><div class="line">const user = require(<span class="string">'./api/user'</span>)</div><div class="line"></div><div class="line">mongoose.connect(<span class="string">'mongodb://localhost/testDB'</span>)</div><div class="line">mongoose.Promise = global.Promise</div><div class="line"> const db = mongoose.connection;</div><div class="line">db.on(<span class="string">'error'</span>, <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">    console.log(<span class="string">'Database connection error.'</span>);</div><div class="line">&#125;);</div><div class="line">db.once(<span class="string">'open'</span>, <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">    console.log(<span class="string">'The Database has connected.'</span>)</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line">const app = express()</div><div class="line">const port = process.env.PORT || 3000</div><div class="line"></div><div class="line">app.use(bodyParser.json())</div><div class="line">app.use(bodyParser.urlencoded(&#123; extended: <span class="literal">true</span> &#125;))</div><div class="line">app.use(express.static(<span class="string">'dist'</span>))</div><div class="line">app.use(<span class="string">'/api'</span>,user)</div><div class="line"></div><div class="line">app.listen(port, () =&gt; &#123;</div><div class="line">  console.log(`<span class="variable">$&#123;pkg.name&#125;</span> listening on port <span class="variable">$&#123;port&#125;</span>`)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">module.exports = app</div></pre></td></tr></table></figure></p>
<p>在项目根目录下新建了api文件夹，用于存放操作数据库的接口方法，api文件下user.js如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">const express = require(<span class="string">'express'</span>)</div><div class="line">const router = express.Router()</div><div class="line">const User = require(<span class="string">'../models/user'</span>)</div><div class="line"></div><div class="line">//查询user表中的数据</div><div class="line">router.get(<span class="string">'/userList'</span>, (req, res) =&gt; &#123;</div><div class="line">  User.find(<span class="keyword">function</span>(err,persons)&#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123;</div><div class="line">        res.json(err)</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        res.json(persons)</div><div class="line">    &#125;</div><div class="line"> &#125;)</div><div class="line">&#125;)</div><div class="line">//往user表中插入数据</div><div class="line">router.get(<span class="string">'/insertUser'</span>, (req,res) =&gt; &#123;</div><div class="line">  var user = new Movie(&#123;</div><div class="line">      userName : <span class="string">'zengdh'</span>,                </div><div class="line">      age : <span class="string">'20'</span>,</div><div class="line">      sex : <span class="string">'男'</span>,</div><div class="line">      job : <span class="string">'前端攻城狮'</span></div><div class="line">  &#125;);</div><div class="line">  user.save(<span class="keyword">function</span> (err, results) &#123;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (err) &#123;</div><div class="line">          res.send(<span class="string">"Error:"</span> + err)</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">else</span> &#123;</div><div class="line">          res.send(&#123;</div><div class="line">            message: <span class="string">'数据添加成功'</span>,</div><div class="line">            data: results</div><div class="line">          &#125;)</div><div class="line">      &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>在项目根目录下新建models文件夹，用于存放数据模型，这里models下user.js内容如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">const mongoose = require(<span class="string">'mongoose'</span>)</div><div class="line"></div><div class="line">const userSchema =new mongoose.Schema(&#123;</div><div class="line">  userName:  &#123; <span class="built_in">type</span>: String &#125;,//用户名</div><div class="line">  age:  &#123; <span class="built_in">type</span>: Number &#125;, // 年龄</div><div class="line">  sex:  &#123; <span class="built_in">type</span>: String &#125;,// 性别</div><div class="line">  job:  &#123; <span class="built_in">type</span>: String &#125;, // 工作</div><div class="line">&#125;,&#123;collection:<span class="string">'user'</span>&#125;)</div><div class="line">// 这边collection如果不写的话，在调用api接口的时候，会在数据库中新建一张后缀名加了s的表，即users</div><div class="line"></div><div class="line">const Movie = module.exports = mongoose.model(<span class="string">'user'</span>,userSchema)</div></pre></td></tr></table></figure></p>
<h2 id="7-调用接口"><a href="#7-调用接口" class="headerlink" title="7.调用接口"></a>7.调用接口</h2><p>在package.json中加了启动服务的命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"server"</span>: <span class="string">"nodemon app.js"</span></div></pre></td></tr></table></figure></p>
<p>运行 npm run server，浏览器输入”localhost:3000/api/userList” ，这是刚才在api文件夹下user.js中写的获取数据的接口，调用成功后返回内容如下：<br><img src="/img/img15.png"><br>这是刚才通过数据库直接插入表中的数据，接下来调用一下插入信息的接口，浏览器输入”localhost:3000/api/insertUser” ，调用成功后返回内容如下：<br><img src="/img/img16.png"><br>然后看下数据库：<br><img src="/img/img17.png"><br>数据插入成功了，大功告成。</p>
<p>over</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mongodb安装完成后，开始实战操作，这里使用express框架和mongodb可视化工具Robomongo一起搭配使用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="express" scheme="http://zengdh.com/tags/express/"/>
    
      <category term="mongodb" scheme="http://zengdh.com/tags/mongodb/"/>
    
      <category term="node" scheme="http://zengdh.com/tags/node/"/>
    
      <category term="mongoose" scheme="http://zengdh.com/tags/mongoose/"/>
    
      <category term="body-parser" scheme="http://zengdh.com/tags/body-parser/"/>
    
      <category term="robomongo" scheme="http://zengdh.com/tags/robomongo/"/>
    
  </entry>
  
  <entry>
    <title>初探mongodb（一）</title>
    <link href="http://zengdh.com/2017/06/02/note8/"/>
    <id>http://zengdh.com/2017/06/02/note8/</id>
    <published>2017-06-02T06:56:26.637Z</published>
    <updated>2017-06-02T07:51:04.486Z</updated>
    
    <content type="html"><![CDATA[<p>配置：</p>
<p>1.nodejs（官网地址：<a href="https://nodejs.org/en/" target="_blank">https://nodejs.org/en/</a>下载安装）<br>2.express，基于nodejs的开发框架-<a href="http://www.expressjs.com.cn/" target="_blank">传送门</a><br>3.mongodb<br>4.mongoose</p>
<a id="more"></a>
<h2 id="1-mongodb-安装配置"><a href="#1-mongodb-安装配置" class="headerlink" title="1.mongodb 安装配置"></a>1.mongodb 安装配置</h2><p>进入mongodb官网下载安装，附上<a href="https://www.mongodb.com/download-center?jmp=nav#community" target="_blank">传送门</a>，安装完成后的目录文件：<br><img src="/img/img5.png"></p>
<p style="color:red">logs这个目录是后面手动新建的文件夹，用来存放日志文件的。</p>

<h2 id="2-修改环境变量"><a href="#2-修改环境变量" class="headerlink" title="2.修改环境变量"></a>2.修改环境变量</h2><p>mongodb安装完成后，将mongdb的文件目录路径添加至系统变量path下<br><img src="/img/img6.png"></p>
<h2 id="3-创建数据库目录"><a href="#3-创建数据库目录" class="headerlink" title="3.创建数据库目录"></a>3.创建数据库目录</h2><p>数据库目录不会自动创建，需要手动创建，这边我手动创建在F:\data\db</p>
<h2 id="4-指定数据库存放目录及日志"><a href="#4-指定数据库存放目录及日志" class="headerlink" title="4.指定数据库存放目录及日志"></a>4.指定数据库存放目录及日志</h2><p>打开cmd，输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongod --dbpath <span class="string">"F:\data\db"</span> --logpath <span class="string">"F:\mongodb\logs\mongod.log"</span></div></pre></td></tr></table></figure></p>
<h2 id="5-安装mongodb为windows服务"><a href="#5-安装mongodb为windows服务" class="headerlink" title="5.安装mongodb为windows服务"></a>5.安装mongodb为windows服务</h2><p>通过命令启动mongo服务太麻烦，为mongodb注册系统服务，以管理员身份打开cmd，输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongod --install --dbpath <span class="string">"F:\data\db"</span> --logpath <span class="string">"F:\mongodb\logs\mongod.log"</span></div></pre></td></tr></table></figure></p>
<p>更多设置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongod --bind_ip yourIPadress --logpath <span class="string">"F:\mongodb\logs\mongod.log"</span> --logappend --dbpath <span class="string">"D:\data\db"</span> --port yourPortNumber --serviceName <span class="string">"YourServiceName"</span> --serviceDisplayName <span class="string">"YourServiceName"</span> --install</div></pre></td></tr></table></figure></p>
<p>参数 描述<br>–bind_ip 绑定服务IP，若绑定127.0.0.1，则只能本机访问，不指定默认本地所有IP<br>–logpath 指定MongoDB日志文件，注意是指定文件不是目录<br>–logappend 使用追加的方式写日志<br>–dbpath 指定数据库路径<br>–port 指定服务端口号，默认端口27017<br>–serviceName 指定服务名称<br>–serviceDisplayName 指定服务名称，有多个mongodb服务时执行。<br>–install 指定作为一个Windows服务安装。</p>
<h2 id="6-mongo服务指令"><a href="#6-mongo服务指令" class="headerlink" title="6.mongo服务指令"></a>6.mongo服务指令</h2><p>添加完window服务后，以管理员身份打开cmd，启动服务输入命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">net start MongoDB</div></pre></td></tr></table></figure></p>
<p>关闭服务命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">net stop MongoDB</div></pre></td></tr></table></figure></p>
<p><img src="/img/img7.png"></p>
<h2 id="7-报错"><a href="#7-报错" class="headerlink" title="7.报错"></a>7.报错</h2><p>如果报错“MongoDB 服务正在启动 .MongoDB 服务无法启动。发生服务特定错误: 100.”，则前去db目录下的mongod.lock和storage.bson文件删掉，以管理员身份运行命令行然后重新启动服务即可。</p>
<p>over</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;配置：&lt;/p&gt;
&lt;p&gt;1.nodejs（官网地址：&lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot;&gt;https://nodejs.org/en/&lt;/a&gt;下载安装）&lt;br&gt;2.express，基于nodejs的开发框架-&lt;a href=&quot;http://www.expressjs.com.cn/&quot; target=&quot;_blank&quot;&gt;传送门&lt;/a&gt;&lt;br&gt;3.mongodb&lt;br&gt;4.mongoose&lt;/p&gt;
    
    </summary>
    
    
      <category term="express" scheme="http://zengdh.com/tags/express/"/>
    
      <category term="mongodb" scheme="http://zengdh.com/tags/mongodb/"/>
    
      <category term="node" scheme="http://zengdh.com/tags/node/"/>
    
      <category term="mongoose" scheme="http://zengdh.com/tags/mongoose/"/>
    
      <category term="body-parser" scheme="http://zengdh.com/tags/body-parser/"/>
    
      <category term="robomongo" scheme="http://zengdh.com/tags/robomongo/"/>
    
  </entry>
  
  <entry>
    <title>前后端分离实践-gulp+express</title>
    <link href="http://zengdh.com/2017/05/25/note7/"/>
    <id>http://zengdh.com/2017/05/25/note7/</id>
    <published>2017-05-25T02:50:44.877Z</published>
    <updated>2017-05-25T02:50:44.877Z</updated>
    
    <content type="html"><![CDATA[<h2 id="技术栈：gulp-express-browser-sync-seajs-sass-ejs"><a href="#技术栈：gulp-express-browser-sync-seajs-sass-ejs" class="headerlink" title="技术栈：gulp+express+browser-sync+seajs+sass+ejs"></a>技术栈：gulp+express+browser-sync+seajs+sass+ejs</h2><p>1.前端打包工具：gulp<br>2.express 做中间件和路由配置<br>3.browser-sync 浏览器自动刷新<br>4.seajs 模块化管理js<br>5.sass css预编译<br>6.ejs 模板引擎</p>
<a id="more"></a>
<h2 id="1-安装express"><a href="#1-安装express" class="headerlink" title="1.安装express"></a>1.安装express</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g express-generator</div></pre></td></tr></table></figure>
<h2 id="2-新建工程"><a href="#2-新建工程" class="headerlink" title="2.新建工程"></a>2.新建工程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ express <span class="_">-e</span> demo</div><div class="line">$ <span class="built_in">cd</span> demo &amp;&amp; npm install</div></pre></td></tr></table></figure>
<h2 id="3-修改routes引入方式"><a href="#3-修改routes引入方式" class="headerlink" title="3.修改routes引入方式"></a>3.修改routes引入方式</h2><p>app.js<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var express = require(<span class="string">'express'</span>);</div><div class="line">var routes = require(<span class="string">'./routes/index'</span>);</div><div class="line">var app = express();</div><div class="line">routes(app);</div></pre></td></tr></table></figure></p>
<p>/routes/index.js<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">module.exports = <span class="keyword">function</span>(app) &#123;</div><div class="line">  app.get(<span class="string">'/'</span>, <span class="keyword">function</span> (req, res) &#123;</div><div class="line">    res.render(<span class="string">'index'</span>, &#123; title: <span class="string">'Express'</span> &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="4-nodemon-browser-sync浏览器自动刷新"><a href="#4-nodemon-browser-sync浏览器自动刷新" class="headerlink" title="4.nodemon+browser-sync浏览器自动刷新"></a>4.nodemon+browser-sync浏览器自动刷新</h2><p>引入依赖<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var browserSync = require(<span class="string">'browser-sync'</span>);</div><div class="line">var nodemon = require(<span class="string">'gulp-nodemon'</span>);</div></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">// 浏览器同步，用7000端口去代理Express的3000端口</div><div class="line">gulp.task(<span class="string">'browser-sync'</span>, [<span class="string">'nodemon'</span>], <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">  browserSync.init(null, &#123;</div><div class="line">    notify: <span class="literal">false</span>,//关闭页面通知</div><div class="line">    proxy: <span class="string">"http://localhost:3000"</span>,</div><div class="line">    files: [<span class="string">"dist/views/*.*"</span>,<span class="string">"dist/public/scss/*.*"</span>,<span class="string">"dist/public/javascripts/*.*"</span>,<span class="string">"dist/public/images/*.*"</span>],</div><div class="line">    browser: <span class="string">"chrome"</span>,</div><div class="line">    port: 7000,</div><div class="line">  &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// 开启Express服务</div><div class="line">gulp.task(<span class="string">'nodemon'</span>, <span class="keyword">function</span> (cb) &#123;</div><div class="line">  </div><div class="line">  var started = <span class="literal">false</span>;</div><div class="line">  </div><div class="line">  <span class="built_in">return</span> nodemon(&#123;</div><div class="line">    script: <span class="string">'bin/www'</span></div><div class="line">  &#125;).on(<span class="string">'start'</span>, <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">    //为了避免nodemon开始多次</div><div class="line">    <span class="keyword">if</span> (!started) &#123;</div><div class="line">      cb();</div><div class="line">      started = <span class="literal">true</span>; </div><div class="line">    &#125; </div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="5-http-proxy-middleware跨域"><a href="#5-http-proxy-middleware跨域" class="headerlink" title="5.http-proxy-middleware跨域"></a>5.http-proxy-middleware跨域</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app.use(<span class="string">'/api'</span>, proxy(&#123;target: <span class="string">'http://localhost:8080'</span>, changeOrigin: <span class="literal">true</span>&#125;));</div></pre></td></tr></table></figure>
<h2 id="6-gulp配置"><a href="#6-gulp配置" class="headerlink" title="6.gulp配置"></a>6.gulp配置</h2><p>和之前的一样</p>
<h2 id="7-ejs基本语法"><a href="#7-ejs基本语法" class="headerlink" title="7.ejs基本语法"></a>7.ejs基本语法</h2><p>无缓冲的条件语句元素<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;% code %&gt;</div></pre></td></tr></table></figure></p>
<p>转义HTML，该code并且会打印出来<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;%= code %&gt;</div></pre></td></tr></table></figure></p>
<p>非转义的buffering，该code并且会打印出来<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;%- code %&gt;</div></pre></td></tr></table></figure></p>
<p>内嵌别的文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;% include file %&gt;</div></pre></td></tr></table></figure></p>
<p>指定布局文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;% layout(file) -%&gt;</div></pre></td></tr></table></figure></p>
<p>包含js脚本文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;% script(file) -%&gt;</div></pre></td></tr></table></figure></p>
<p>包含css文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;% stylesheet(file) -%&gt;</div></pre></td></tr></table></figure></p>
<p>指定块内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;% block(code, code) -%&gt;</div></pre></td></tr></table></figure></p>
<h2 id="8-已上传github"><a href="#8-已上传github" class="headerlink" title="8.已上传github"></a>8.已上传github</h2><p><a href="https://github.com/zdh-chase/gulp-cli" target="_blank">https://github.com/zdh-chase/gulp-cli</a></p>
<p>over</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;技术栈：gulp-express-browser-sync-seajs-sass-ejs&quot;&gt;&lt;a href=&quot;#技术栈：gulp-express-browser-sync-seajs-sass-ejs&quot; class=&quot;headerlink&quot; title=&quot;技术栈：gulp+express+browser-sync+seajs+sass+ejs&quot;&gt;&lt;/a&gt;技术栈：gulp+express+browser-sync+seajs+sass+ejs&lt;/h2&gt;&lt;p&gt;1.前端打包工具：gulp&lt;br&gt;2.express 做中间件和路由配置&lt;br&gt;3.browser-sync 浏览器自动刷新&lt;br&gt;4.seajs 模块化管理js&lt;br&gt;5.sass css预编译&lt;br&gt;6.ejs 模板引擎&lt;/p&gt;
    
    </summary>
    
    
      <category term="gulp" scheme="http://zengdh.com/tags/gulp/"/>
    
      <category term="sass" scheme="http://zengdh.com/tags/sass/"/>
    
      <category term="seajs" scheme="http://zengdh.com/tags/seajs/"/>
    
      <category term="前后端分离" scheme="http://zengdh.com/tags/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB/"/>
    
      <category term="express" scheme="http://zengdh.com/tags/express/"/>
    
      <category term="browser-sync" scheme="http://zengdh.com/tags/browser-sync/"/>
    
      <category term="ejs" scheme="http://zengdh.com/tags/ejs/"/>
    
  </entry>
  
  <entry>
    <title>Gulp 配置（五）---图片篇</title>
    <link href="http://zengdh.com/2017/05/25/note5/"/>
    <id>http://zengdh.com/2017/05/25/note5/</id>
    <published>2017-05-25T02:50:44.876Z</published>
    <updated>2017-05-25T02:50:44.876Z</updated>
    
    <content type="html"><![CDATA[<p>图片整合成雪碧图，几kb的图片转化成base64写入css中，减少http请求。</p>
<h2 id="gulp-base64"><a href="#gulp-base64" class="headerlink" title="gulp-base64"></a>gulp-base64</h2><h4 id="需要引入的依赖"><a href="#需要引入的依赖" class="headerlink" title="需要引入的依赖"></a>需要引入的依赖</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var base64 = require(<span class="string">'gulp-base64'</span>);</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>新建一个task:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'base64'</span>, <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">    <span class="built_in">return</span> gulp.src(<span class="string">'./build/scss/*'</span>)</div><div class="line">        .pipe(base64(&#123;</div><div class="line">            baseDir: <span class="string">'./build/scss/'</span>,</div><div class="line">            extensions: [<span class="string">'svg'</span>, <span class="string">'png'</span>, /\.jpg<span class="comment">#datauri$/i],</span></div><div class="line">            exclude:    [/\.server\.(com|net)\/dynamic\//, <span class="string">'--live.jpg'</span>],</div><div class="line">            maxImageSize: 8*1024, // bytes </div><div class="line">            debug: <span class="literal">true</span></div><div class="line">        &#125;))</div><div class="line">        .pipe(gulp.dest(<span class="string">'./build/scss'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="gulp-css-spriter"><a href="#gulp-css-spriter" class="headerlink" title="gulp-css-spriter"></a>gulp-css-spriter</h2><h4 id="需要引入的依赖-1"><a href="#需要引入的依赖-1" class="headerlink" title="需要引入的依赖"></a>需要引入的依赖</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var spriter = require(<span class="string">'gulp-css-spriter'</span>);</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'mergeScss'</span>, [<span class="string">'cleanScss'</span>],<span class="function"><span class="title">function</span></span> ()&#123;</div><div class="line">        var timestamp = +new Date();</div><div class="line">        <span class="built_in">return</span> gulp.src([<span class="string">'./static/scss/*.scss'</span>])</div><div class="line">            .pipe(sass().on(<span class="string">'error'</span>, sass.logError))</div><div class="line">            .pipe(spriter(&#123;</div><div class="line">            // 生成的spriter的位置</div><div class="line">            <span class="string">'spriteSheet'</span>: <span class="string">'./build/img/sprite-'</span>+timestamp+<span class="string">'.png'</span>,</div><div class="line">            // 生成样式文件图片引用地址的路径</div><div class="line">            // 如下将生产：backgound:url(../images/sprite20324232.png)</div><div class="line">            <span class="string">'pathToSpriteSheetFromCSS'</span>: <span class="string">'../img/sprite-'</span>+timestamp+<span class="string">'.png'</span></div><div class="line">            &#125;))</div><div class="line">            .pipe(minifycss())</div><div class="line">            .pipe(rev())                                            //- 文件名加MD5后缀</div><div class="line">            .pipe(gulp.dest(<span class="string">'./build/scss/'</span>))</div><div class="line">            .pipe(rev.manifest())                                   //- 生成一个rev-manifest.json</div><div class="line">            .pipe(gulp.dest(<span class="string">'./rev'</span>))                              //- 将 rev-manifest.json 保存到 rev 目录内</div><div class="line">            .pipe(notify(&#123; message: <span class="string">'mergeScss task ok'</span> &#125;));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>css:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">.x&#123;width: 50px;height: 50px;background: url(../img/x.png?__spriter) 0 0 no-repeat;&#125;</div><div class="line">.y&#123;width: 50px;height: 50px;background: url(../img/y.png) 0 0 no-repeat;&#125;</div></pre></td></tr></table></figure></p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>gulp-css-spriter默认会对样式文件里，所有的background/background-image的图片合并，</p>
<p>但实际项目中，我们不是所有的图片都需要合并。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">background-image:url(../img/x.png?__spriter);//有?__spriter后缀的合并</div><div class="line"></div><div class="line">background-image:url(../img/y.png);//不合并</div></pre></td></tr></table></figure>
<p>修改gulp-css-spriter源文件<br>进入 node_modules\gulp-css-spriter\lib\map-over-styles-and-transform-background-image-declarations.js<br>第43行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(transformedDeclaration.property === <span class="string">'background-image'</span>) &#123;</div><div class="line">			<span class="built_in">return</span> cb(transformedDeclaration, declarationIndex, declarations);</div><div class="line">		&#125;</div><div class="line">		// Background is a shorthand property so make sure `url()` is <span class="keyword">in</span> there</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(transformedDeclaration.property === <span class="string">'background'</span>) &#123;</div><div class="line">			var hasImageValue = spriterUtil.backgroundURLRegex.test(transformedDeclaration.value);</div><div class="line"></div><div class="line">			<span class="keyword">if</span>(hasImageValue) &#123;</div><div class="line">				<span class="built_in">return</span> cb(transformedDeclaration, declarationIndex, declarations);</div><div class="line">			&#125;</div><div class="line">		&#125;</div></pre></td></tr></table></figure></p>
<p>更新为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(transformedDeclaration.property === <span class="string">'background-image'</span> &amp;&amp; /\?__spriter/i.test(transformedDeclaration.value)) &#123;</div><div class="line"></div><div class="line">                    transformedDeclaration.value = transformedDeclaration.value.replace(<span class="string">'?__spriter'</span>,<span class="string">''</span>);</div><div class="line">                    <span class="built_in">return</span> cb(transformedDeclaration, declarationIndex, declarations);</div><div class="line">                &#125;</div><div class="line">                // Background is a shorthand property so make sure `url()` is <span class="keyword">in</span> there 且判断url是否有?__spriter后缀</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(transformedDeclaration.property === <span class="string">'background'</span> &amp;&amp; /\?__spriter/i.test(transformedDeclaration.value)) &#123;</div><div class="line"></div><div class="line">                    transformedDeclaration.value = transformedDeclaration.value.replace(<span class="string">'?__spriter'</span>,<span class="string">''</span>);</div><div class="line">                    var hasImageValue = spriterUtil.backgroundURLRegex.test(transformedDeclaration.value);</div><div class="line"></div><div class="line">                    <span class="keyword">if</span>(hasImageValue) &#123;</div><div class="line">                        <span class="built_in">return</span> cb(transformedDeclaration, declarationIndex, declarations);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div></pre></td></tr></table></figure></p>
<p>over</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;图片整合成雪碧图，几kb的图片转化成base64写入css中，减少http请求。&lt;/p&gt;
&lt;h2 id=&quot;gulp-base64&quot;&gt;&lt;a href=&quot;#gulp-base64&quot; class=&quot;headerlink&quot; title=&quot;gulp-base64&quot;&gt;&lt;/a&gt;gulp-base64&lt;/h2&gt;&lt;h4 id=&quot;需要引入的依赖&quot;&gt;&lt;a href=&quot;#需要引入的依赖&quot; class=&quot;headerlink&quot; title=&quot;需要引入的依赖&quot;&gt;&lt;/a&gt;需要引入的依赖&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var base64 = require(&lt;span class=&quot;string&quot;&gt;&#39;gulp-base64&#39;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="base64" scheme="http://zengdh.com/tags/base64/"/>
    
      <category term="spriter" scheme="http://zengdh.com/tags/spriter/"/>
    
  </entry>
  
  <entry>
    <title>Gulp 配置（四）---模板篇</title>
    <link href="http://zengdh.com/2017/05/25/note4/"/>
    <id>http://zengdh.com/2017/05/25/note4/</id>
    <published>2017-05-25T02:50:44.876Z</published>
    <updated>2017-05-25T02:50:44.876Z</updated>
    
    <content type="html"><![CDATA[<p>提取公共html页面为实际开发提供了便捷，这里引入gulp-file-include做公共模块复用。</p>
<h2 id="gulp-file-include"><a href="#gulp-file-include" class="headerlink" title="gulp-file-include"></a>gulp-file-include</h2><h4 id="需要引入的依赖"><a href="#需要引入的依赖" class="headerlink" title="需要引入的依赖"></a>需要引入的依赖</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var fileinclude  = require(<span class="string">'gulp-file-include'</span>);</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>新建一个task:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'fileinclude'</span>, <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">    // 适配src中所有文件夹下的所有html，排除src下的include文件夹中html</div><div class="line">    gulp.src([<span class="string">'./src/view/*.html'</span>,<span class="string">'!./src/view/common/*.html'</span>])</div><div class="line">        .pipe(fileinclude(&#123;</div><div class="line">          prefix: <span class="string">'@@'</span>,</div><div class="line">          basepath: <span class="string">'@file'</span></div><div class="line">        &#125;))</div><div class="line">    .pipe(gulp.dest(<span class="string">'./build/view/'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>gulp task已经写好了，这里新建两个公共html页面，header.html和footer.html</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">header.html</div><div class="line">&lt;div&gt;这是头部&lt;/div&gt;</div><div class="line"></div><div class="line">footer.html</div><div class="line">&lt;div&gt;这是页脚&lt;/div&gt;</div></pre></td></tr></table></figure>
<h2 id="引入公共组件"><a href="#引入公共组件" class="headerlink" title="引入公共组件"></a>引入公共组件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@@include(<span class="string">'common/header.html'</span>)</div><div class="line">   &lt;div&gt;主内容&lt;/div&gt;</div><div class="line">@@include(<span class="string">'common/footer.html'</span>)</div></pre></td></tr></table></figure>
<h2 id="编译后生产环境下的html"><a href="#编译后生产环境下的html" class="headerlink" title="编译后生产环境下的html"></a>编译后生产环境下的html</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;这是头部&lt;/div&gt;</div><div class="line">&lt;div&gt;主内容&lt;/div&gt;</div><div class="line">&lt;div&gt;这是页脚&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>至此完成了html模板复用，结合上一章的自动刷新，更新下watch，将fileinclude放入watch中监听html，并刷新<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'watch'</span>, <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">  gulp.watch(paths.html,[<span class="string">'fileinclude'</span>,<span class="string">'html'</span>]);</div><div class="line">  gulp.watch(paths.scripts,[<span class="string">'mergeScripts'</span>,<span class="string">'html'</span>]);</div><div class="line">  gulp.watch(paths.scss,[<span class="string">'mergeScss'</span>,<span class="string">'html'</span>]);</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>over</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;提取公共html页面为实际开发提供了便捷，这里引入gulp-file-include做公共模块复用。&lt;/p&gt;
&lt;h2 id=&quot;gulp-file-include&quot;&gt;&lt;a href=&quot;#gulp-file-include&quot; class=&quot;headerlink&quot; title=&quot;gulp-file-include&quot;&gt;&lt;/a&gt;gulp-file-include&lt;/h2&gt;&lt;h4 id=&quot;需要引入的依赖&quot;&gt;&lt;a href=&quot;#需要引入的依赖&quot; class=&quot;headerlink&quot; title=&quot;需要引入的依赖&quot;&gt;&lt;/a&gt;需要引入的依赖&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var fileinclude  = require(&lt;span class=&quot;string&quot;&gt;&#39;gulp-file-include&#39;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="gulp" scheme="http://zengdh.com/tags/gulp/"/>
    
      <category term="gulp-file-include" scheme="http://zengdh.com/tags/gulp-file-include/"/>
    
  </entry>
  
  <entry>
    <title>git日常提交步骤-基本命令行</title>
    <link href="http://zengdh.com/2017/05/25/note6/"/>
    <id>http://zengdh.com/2017/05/25/note6/</id>
    <published>2017-05-25T02:50:44.876Z</published>
    <updated>2017-05-25T02:50:44.877Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-下载代码"><a href="#1-下载代码" class="headerlink" title="1.下载代码"></a>1.下载代码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> http//xxxx.git –b dev xxxx_dev_local</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>注解：<br>1)   -b dev   指定想要下载的分支，去掉省略的话下载的是默认分支是master（注：默认分支可以修改）<br>2)   xxxx_dev_local是我想要在本地创建的git库文件夹名字，去掉省略的话下载好的git库名字是xxxx git库的名字，建议使用这种重命名方式</p>
<h2 id="2-更新代码"><a href="#2-更新代码" class="headerlink" title="2.更新代码"></a>2.更新代码</h2><p>注：每次修改前养成同步更新代码的好习惯<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git pull –rebase</div></pre></td></tr></table></figure></p>
<p>如果提示冲突，说明本地git库中未入库的提交中有修改和代码库中冲突了，修改冲突文件并删除冲突标识&lt;&lt;&lt;&lt;&lt; ==== &gt;&gt;&gt;&gt;后:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git add 冲突文件名               //加入git index中</div><div class="line">git rebase –<span class="built_in">continue</span>                 //继续更新到最新的base上</div></pre></td></tr></table></figure></p>
<h2 id="3-修改、增加或删除代码文件到git-index缓存中"><a href="#3-修改、增加或删除代码文件到git-index缓存中" class="headerlink" title="3.修改、增加或删除代码文件到git index缓存中"></a>3.修改、增加或删除代码文件到git index缓存中</h2><p>修改或新增加代码文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git add file_name</div></pre></td></tr></table></figure></p>
<p>删除代码文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git rm file_name</div></pre></td></tr></table></figure></p>
<h2 id="4-提交本地git库index缓存中的修改"><a href="#4-提交本地git库index缓存中的修改" class="headerlink" title="4.提交本地git库index缓存中的修改"></a>4.提交本地git库index缓存中的修改</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit –m “just a <span class="built_in">test</span> <span class="keyword">for</span> commit ”</div></pre></td></tr></table></figure>
<p>如果本地修改不对或commit的LOG需要修改可以使用：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit –-amend //修复上一次提交，不要修改Merge提交</div></pre></td></tr></table></figure></p>
<p>##5.更新代码<br>注：每次push前养成同步更新代码的好习惯<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git pull –rebase</div></pre></td></tr></table></figure></p>
<p>如果提示冲突，说明本地git库中未入库的提交中有修改和代码库中冲突了，修改冲突文件并删除冲突标识&lt;&lt;&lt;&lt;&lt; ==== &gt;&gt;&gt;&gt;后:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git add 冲突文件名               //加入git index中</div><div class="line">git rebase –<span class="built_in">continue</span>                 //继续更新到最新的base上</div></pre></td></tr></table></figure></p>
<p>##6.推送提交到服务器上的git库中<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push</div></pre></td></tr></table></figure></p>
<p>注：默认会推送到我们下载git库时的-b 后面加的那个分支，没有加默认是master，这个命令完整版实际上是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin 当前分支名:我们下载的分支名</div></pre></td></tr></table></figure></p>
<p>##7.解消代码冲突<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git merge xxxx_branch 或者 git pull 时 or</div><div class="line">git rebase xxxx_branch 或者 git pull --rebase 时</div></pre></td></tr></table></figure></p>
<p>解消方法也是修改冲突文件并删除冲突标识&lt;&lt;&lt;&lt;&lt; ==== &gt;&gt;&gt;：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git rebase –<span class="built_in">continue</span>                 //继续更新到最新的base上</div></pre></td></tr></table></figure></p>
<p>over</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-下载代码&quot;&gt;&lt;a href=&quot;#1-下载代码&quot; class=&quot;headerlink&quot; title=&quot;1.下载代码&quot;&gt;&lt;/a&gt;1.下载代码&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; http//xxxx.git –b dev xxxx_dev_local&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://zengdh.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Gulp 配置（三）---service篇</title>
    <link href="http://zengdh.com/2017/05/25/note3/"/>
    <id>http://zengdh.com/2017/05/25/note3/</id>
    <published>2017-05-25T02:50:44.875Z</published>
    <updated>2017-05-25T02:50:44.875Z</updated>
    
    <content type="html"><![CDATA[<p>实际开发中，如果每次修改html、sass、js都要手动去执行编译命令，这将是一件很痛苦的事，所以配置一个本地服务，让它实时编译刷新是很必要的。</p>
<h2 id="gulp-connect"><a href="#gulp-connect" class="headerlink" title="gulp-connect"></a>gulp-connect</h2><h4 id="需要引入的依赖"><a href="#需要引入的依赖" class="headerlink" title="需要引入的依赖"></a>需要引入的依赖</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var connect = require(<span class="string">'gulp-connect'</span>);</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>新建一个task:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'connect'</span>, <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">    connect.server(&#123;</div><div class="line">       // host: <span class="string">'192.168.x.x'</span>, //地址，可不写，不写的话，默认localhost</div><div class="line">        port: 3000, //端口号，可不写，默认8000</div><div class="line">        root: <span class="string">'./'</span>, //当前项目主目录</div><div class="line">        livereload: <span class="literal">true</span> //自动刷新</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>这样就能在本地启一个服务了，但是这样还不够，我们需要去监听项目的文件是否发生更改，如果有更改就自动去编译，这里需要用到gulp-watch</p>
<h2 id="gulp-watch"><a href="#gulp-watch" class="headerlink" title="gulp-watch"></a>gulp-watch</h2><p>引入依赖<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var sass = require(<span class="string">'gulp-watch'</span>);</div></pre></td></tr></table></figure></p>
<p>新建一个task</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var paths = &#123;</div><div class="line">  scripts: [<span class="string">'./src/js/*.js'</span>],</div><div class="line">  scss: <span class="string">'./src/scss/*.scss'</span>,</div><div class="line">&#125;;</div><div class="line">gulp.task(<span class="string">'watch'</span>, <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">  gulp.watch(paths.scripts,[<span class="string">'mergeScripts'</span>]);</div><div class="line">  gulp.watch(paths.scss,[<span class="string">'mergeScss'</span>]);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>用watch去监听文件，当js和css发生变化时自动编译生成，但是每次都需要按F5才能更新页面，这里再写一个task去自动刷新页面，毕竟我这么懒，F5也懒得去按。</p>
<p>再新建一个task<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'html'</span>, <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">    <span class="built_in">return</span> gulp.src(<span class="string">'./build/view/*.html'</span>)//这里的路径时生产文件的路径</div><div class="line">        .pipe(connect.reload());</div><div class="line">&#125;);</div><div class="line"></div><div class="line">注：task里要加<span class="built_in">return</span>，不加<span class="built_in">return</span>，task和里面的gulp流是异步执行的。</div></pre></td></tr></table></figure></p>
<p>将它放入watch中<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gulp.watch(paths.html,[<span class="string">'html'</span>]);</div><div class="line">gulp.watch(paths.scripts,[<span class="string">'mergeScripts'</span>,<span class="string">'html'</span>]);</div><div class="line">gulp.watch(paths.scss,[<span class="string">'mergeScss'</span>,<span class="string">'html'</span>]);</div></pre></td></tr></table></figure></p>
<p>这样就可以在修改源文件的同时，让gulp去自动生成需要的生产文件，这里再合并一下task，丢在一个task里面，方便使用</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'service'</span>, [<span class="string">'connect'</span>, <span class="string">'watch'</span>]);</div></pre></td></tr></table></figure>
<h2 id="http-proxy-middleware-代理跨域"><a href="#http-proxy-middleware-代理跨域" class="headerlink" title="http-proxy-middleware 代理跨域"></a>http-proxy-middleware 代理跨域</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'proxy'</span>, <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">    connect.server(&#123;</div><div class="line">        root: [<span class="string">'./'</span>],</div><div class="line">        port: 3000,</div><div class="line">        livereload: <span class="literal">true</span>,</div><div class="line">        middleware: <span class="keyword">function</span>(connect, opt) &#123;</div><div class="line">            <span class="built_in">return</span> [</div><div class="line">                proxy(<span class="string">'/api'</span>,  &#123;</div><div class="line">                    target: <span class="string">'http://localhost:8080'</span>,</div><div class="line">                    changeOrigin:<span class="literal">true</span></div><div class="line">                &#125;),</div><div class="line">                proxy(<span class="string">'/otherServer'</span>, &#123;</div><div class="line">                    target: <span class="string">'http://IP:Port'</span>,</div><div class="line">                    changeOrigin:<span class="literal">true</span></div><div class="line">                &#125;)</div><div class="line">            ]</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>over</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实际开发中，如果每次修改html、sass、js都要手动去执行编译命令，这将是一件很痛苦的事，所以配置一个本地服务，让它实时编译刷新是很必要的。&lt;/p&gt;
&lt;h2 id=&quot;gulp-connect&quot;&gt;&lt;a href=&quot;#gulp-connect&quot; class=&quot;headerlink&quot; title=&quot;gulp-connect&quot;&gt;&lt;/a&gt;gulp-connect&lt;/h2&gt;&lt;h4 id=&quot;需要引入的依赖&quot;&gt;&lt;a href=&quot;#需要引入的依赖&quot; class=&quot;headerlink&quot; title=&quot;需要引入的依赖&quot;&gt;&lt;/a&gt;需要引入的依赖&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var connect = require(&lt;span class=&quot;string&quot;&gt;&#39;gulp-connect&#39;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="gulp" scheme="http://zengdh.com/tags/gulp/"/>
    
      <category term="gulp-watch" scheme="http://zengdh.com/tags/gulp-watch/"/>
    
      <category term="gulp-connect" scheme="http://zengdh.com/tags/gulp-connect/"/>
    
  </entry>
  
  <entry>
    <title>Gulp 配置（二）---sass篇</title>
    <link href="http://zengdh.com/2017/05/25/note2/"/>
    <id>http://zengdh.com/2017/05/25/note2/</id>
    <published>2017-05-25T02:50:44.874Z</published>
    <updated>2017-05-25T02:50:44.875Z</updated>
    
    <content type="html"><![CDATA[<p>sass、less、stylus都是css预处理框架，它可以提高开发效率，编写富有表现力的、动态的、健壮的CSS。</p>
<ul>
<li>这里选择sass</li>
</ul>
<h2 id="gulp-css-task"><a href="#gulp-css-task" class="headerlink" title="gulp css task"></a>gulp css task</h2><h4 id="需要引入的依赖"><a href="#需要引入的依赖" class="headerlink" title="需要引入的依赖"></a>需要引入的依赖</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var minifycss = require(<span class="string">'gulp-minify-css'</span>), //压缩css</div><div class="line">    rev = require(<span class="string">'gulp-rev'</span>);                                  //- 对文件名加MD5后缀</div></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'mergeCss'</span>,[<span class="string">'cleanCss'</span>], <span class="function"><span class="title">function</span></span>() &#123;                                //- 创建一个名为 mergeCss 的 task</div><div class="line">        <span class="built_in">return</span> gulp.src([<span class="string">'./src/css/*.css'</span>])    //- 需要处理的css文件，放到一个字符串数组里</div><div class="line">            //.pipe(concat(*))   //- 合并后的文件名</div><div class="line">            .pipe(minifycss())          //- 压缩处理成一行</div><div class="line">            .pipe(rev())                                            //- 文件名加MD5后缀</div><div class="line">            .pipe(gulp.dest(<span class="string">'./build/css/'</span>))   //- 输出文件本地*/</div><div class="line">            .pipe(rev.manifest())                                   //- 生成一个rev-manifest.json</div><div class="line">            .pipe(gulp.dest(<span class="string">'./rev'</span>));                              //- 将 rev-manifest.json 保存到 rev 目录内</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>普通css文件的gulp task任务，主要是css压缩+MD5时间戳+HTML路径更换</p>
<h2 id="sass"><a href="#sass" class="headerlink" title="sass"></a>sass</h2><p>在开发过程中，sass需要编译才能使用，可以用命令行编译，gui编译（推荐koala），编辑器编译，在线编译等等，这里我结合gulp引入gulp-sass来编译。<br>sass文件后缀分两种，scss和sass，一个使用{}，一个不使用，我选择scss，可读性高一些。</p>
<h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var sass = require(<span class="string">'gulp-sass'</span>);</div></pre></td></tr></table></figure>
<h4 id="task任务"><a href="#task任务" class="headerlink" title="task任务"></a>task任务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'mergeScss'</span>, [<span class="string">'cleanScss'</span>],<span class="function"><span class="title">function</span></span> ()&#123;</div><div class="line">        <span class="built_in">return</span> gulp.src([<span class="string">'./src/scss/*.scss'</span>])</div><div class="line">            .pipe(sass().on(<span class="string">'error'</span>, sass.logError))</div><div class="line">            .pipe(rev())                                            //- 文件名加MD5后缀</div><div class="line">            .pipe(gulp.dest(<span class="string">'./build/scss/'</span>))</div><div class="line">            .pipe(rev.manifest())                                   //- 生成一个rev-manifest.json</div><div class="line">            .pipe(gulp.dest(<span class="string">'./rev'</span>));                              //- 将 rev-manifest.json 保存到 rev 目录内</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这里编译后的css文件名是通过原文件名和md5以连字符形式命名的（例：a-f7e3d6869b.css），每次修改css后生成的文件名都不一样，需要清除原有的旧文件，否则会堆积很多没用的css，我更喜欢在html中引入css时在路径后面加‘?v={time}’的形式，这里我选择去修改node_modules里面的js文件来满足我的需求。</p>
<h2 id="打开-node-modules-gulp-rev-index-js"><a href="#打开-node-modules-gulp-rev-index-js" class="headerlink" title="打开 node_modules\gulp-rev\index.js"></a>打开 node_modules\gulp-rev\index.js</h2><p>第144行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">manifest[originalFile] = revisionedFile;</div></pre></td></tr></table></figure></p>
<p>更新为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">manifest[originalFile] = originalFile + <span class="string">'?v='</span> + file.revHash; //file.revHash是md5字符串，可以换成new Date().getTime()来获取当前时间的毫秒戳</div></pre></td></tr></table></figure></p>
<h2 id="打开-nodemodules-gulp-rev-nodemodules-rev-path-index-js"><a href="#打开-nodemodules-gulp-rev-nodemodules-rev-path-index-js" class="headerlink" title="打开 nodemodules\gulp-rev\nodemodules\rev-path\index.js"></a>打开 nodemodules\gulp-rev\nodemodules\rev-path\index.js</h2><p>第10行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">return</span> filename + <span class="string">'-'</span> + <span class="built_in">hash</span> + ext;</div></pre></td></tr></table></figure></p>
<p>更新为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">return</span> filename + ext;</div></pre></td></tr></table></figure></p>
<h2 id="打开-node-modules-gulp-rev-collector-index-js"><a href="#打开-node-modules-gulp-rev-collector-index-js" class="headerlink" title="打开 node_modules\gulp-rev-collector\index.js"></a>打开 node_modules\gulp-rev-collector\index.js</h2><p>第31行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ( !_.isString(json[key]) || path.basename(json[key]).replace(new RegExp( opts.revSuffix ), <span class="string">''</span> ) !==  path.basename(key) ) &#123;</div></pre></td></tr></table></figure></p>
<p>更新为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ( path.basename(json[key]).split(<span class="string">'?'</span>)[0] !== path.basename(key) ) &#123;</div></pre></td></tr></table></figure></p>
<p>第46行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">return</span> pattern.replace(/[\-\[\]\&#123;\&#125;\(\)\*\+\?\.\^\$\|\/\\]/g, <span class="string">"\\$&amp;"</span>);</div></pre></td></tr></table></figure></p>
<p>更新为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var rp = pattern.replace(/[\-\[\]\&#123;\&#125;\(\)\*\+\?\.\^\$\|\/\\]/g, <span class="string">"\\$&amp;"</span>);</div><div class="line">rp = pattern + <span class="string">"(\\?v=(\\d|[a-z])&#123;8,10&#125;)*"</span>; //匹配md5</div><div class="line">//rp = pattern + <span class="string">"(\\?v=(\\d&#123;13&#125;))*"</span>; 匹配后缀为毫秒戳</div><div class="line"><span class="built_in">return</span> rp;</div></pre></td></tr></table></figure></p>
<h2 id="路径替换"><a href="#路径替换" class="headerlink" title="路径替换"></a>路径替换</h2><p>引入依赖<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var revCollector = require(<span class="string">'gulp-rev-collector'</span>);</div></pre></td></tr></table></figure></p>
<p>gulp task</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'scssrev'</span>,[<span class="string">'mergeScss'</span>],<span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">  <span class="built_in">return</span> gulp.src( [<span class="string">'./rev/*.json'</span>,<span class="string">'./build/view/*.html'</span>])                                    //- 读取 rev-manifest.json 文件以及需要进行css名替换的文件</div><div class="line">               .pipe(revCollector(</div><div class="line">                   &#123;</div><div class="line">                    replaceReved: <span class="literal">true</span></div><div class="line">                    /*dirReplacements: &#123;//指定路径替换</div><div class="line">                        <span class="string">'/static/scss'</span>: <span class="string">'/build/scss'</span></div><div class="line">                    &#125;*/</div><div class="line">                   &#125;</div><div class="line">                ))                                   //- 执行文件内css名的替换</div><div class="line">               .pipe(gulp.dest(<span class="string">"./build/view/"</span>));                   //- 替换后的文件输出的目录    </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>最后这些编译后的css文件会以*.css?v={time}的形式引入，解决浏览器缓存机制。</p>
<h2 id="gulp-px3rem"><a href="#gulp-px3rem" class="headerlink" title="gulp-px3rem"></a>gulp-px3rem</h2><p>px单位转换成rem<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.pipe(px2rem())</div><div class="line"></div><div class="line">px2rem(&#123;</div><div class="line">  baseDpr: 2,             // 基本设备像素比（默认值：2）</div><div class="line">  threeVersion: <span class="literal">false</span>,    // 是否产生“1X，2X和@ @ 3x版本（默认：<span class="literal">false</span>）</div><div class="line">  remVersion: <span class="literal">true</span>,       // 是否生成rem版本（默认值：<span class="literal">true</span>）</div><div class="line">  remUnit: 75,            // 转化基值（默认：75）</div><div class="line">  remPrecision: 6         // rem 精确度 (默认: 6)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>默认生成的css文件名格式为*.debug.css，去掉debug可以在对应的node_modules里面的index.js修改正则表达式，去掉debug就可以了。</p>
<p>over</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;sass、less、stylus都是css预处理框架，它可以提高开发效率，编写富有表现力的、动态的、健壮的CSS。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这里选择sass&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;gulp-css-task&quot;&gt;&lt;a href=&quot;#gulp-css-task&quot; class=&quot;headerlink&quot; title=&quot;gulp css task&quot;&gt;&lt;/a&gt;gulp css task&lt;/h2&gt;&lt;h4 id=&quot;需要引入的依赖&quot;&gt;&lt;a href=&quot;#需要引入的依赖&quot; class=&quot;headerlink&quot; title=&quot;需要引入的依赖&quot;&gt;&lt;/a&gt;需要引入的依赖&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var minifycss = require(&lt;span class=&quot;string&quot;&gt;&#39;gulp-minify-css&#39;&lt;/span&gt;), //压缩css&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    rev = require(&lt;span class=&quot;string&quot;&gt;&#39;gulp-rev&#39;&lt;/span&gt;);                                  //- 对文件名加MD5后缀&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="gulp" scheme="http://zengdh.com/tags/gulp/"/>
    
      <category term="css" scheme="http://zengdh.com/tags/css/"/>
    
      <category term="sass" scheme="http://zengdh.com/tags/sass/"/>
    
      <category term="px3rem" scheme="http://zengdh.com/tags/px3rem/"/>
    
  </entry>
  
  <entry>
    <title>Gulp 配置（一）---seaJs篇</title>
    <link href="http://zengdh.com/2017/05/25/note/"/>
    <id>http://zengdh.com/2017/05/25/note/</id>
    <published>2017-05-25T02:50:44.874Z</published>
    <updated>2017-05-25T02:50:44.874Z</updated>
    
    <content type="html"><![CDATA[<p>Gulp.js 是基于 Node.js 构建的，可以建项目并减少频繁的 IO 操作的化构建工具<br>这里我采用 <a href="http://seajs.org/" target="_blank">seajs</a>来管理我的javascript代码，提高JavaScript代码的可读性和清晰度，解决目前JavaScript编程中普遍存在的依赖关系混乱和代码纠缠等问题，方便代码的编写和维护。</p>
<ul>
<li>gulp安装就不赘述</li>
</ul>
<h2 id="引入seajs"><a href="#引入seajs" class="headerlink" title="引入seajs"></a>引入seajs</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"../../src/js/sea.js"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="配置seajs"><a href="#配置seajs" class="headerlink" title="配置seajs"></a>配置seajs</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">seajs.config(&#123;</div><div class="line">	 paths: &#123;</div><div class="line">             <span class="string">'src'</span>: <span class="string">'../../src/'</span>  //路径配置</div><div class="line">	 &#125;,</div><div class="line">         <span class="built_in">alias</span>: &#123;//别名配置</div><div class="line">             jquery:<span class="string">'jquery.js'</span>,</div><div class="line">             index:<span class="string">'src/js/index.js'</span></div><div class="line">         &#125;,</div><div class="line">         map: [//映射配置</div><div class="line">	     [ /^(.*\.(?:css|js))(.*)$/i, <span class="string">'$1?201703281819'</span> ]</div><div class="line">	 ],</div><div class="line">	 preload: [<span class="string">'jquery'</span>]  // 预加载项</div><div class="line">	 &#125;);</div><div class="line">seajs.use([<span class="string">"jquery"</span>,<span class="string">"index"</span>]);  //模块加载</div></pre></td></tr></table></figure>
<p><a href="http://yslove.net/seajs/" target="_blank">更多配置项&gt;&gt;</a></p>
<h2 id="新建两个js文件a-js和b-js"><a href="#新建两个js文件a-js和b-js" class="headerlink" title="新建两个js文件a.js和b.js"></a>新建两个js文件a.js和b.js</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">a.js:</div><div class="line">define(<span class="keyword">function</span>(require, exports, module) &#123;</div><div class="line">	var AJS=&#123;</div><div class="line">        init:<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line"></div><div class="line">        &#125;,</div><div class="line">        aDom:<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">        	console.log(<span class="string">'来自a.js的内容'</span>);</div><div class="line">        &#125;</div><div class="line">	&#125;;</div><div class="line">	module.exports=AJS;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">b.js:</div><div class="line">define(<span class="keyword">function</span>(require, exports, module) &#123;</div><div class="line">	var BJS=&#123;</div><div class="line">        init:<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line"></div><div class="line">        &#125;,</div><div class="line">        aDom:<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">        	console.log(<span class="string">'来自b.js的内容'</span>);</div><div class="line">        &#125;</div><div class="line">	&#125;;</div><div class="line">	module.exports=BJS;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="index-js引入a-js和b-js的方法"><a href="#index-js引入a-js和b-js的方法" class="headerlink" title="index.js引入a.js和b.js的方法"></a>index.js引入a.js和b.js的方法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">define(<span class="keyword">function</span>(require, exports, module) &#123;</div><div class="line">        var AJS=require(<span class="string">'a'</span>);</div><div class="line">        var BJS=require(<span class="string">'b'</span>);</div><div class="line">	var INDEX=&#123;</div><div class="line">        init:<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">            console.log(<span class="string">'来自index.js的内容'</span>);</div><div class="line">            AJS.aDom();</div><div class="line">            BJS.bDom();</div><div class="line">        &#125;</div><div class="line">	&#125;;</div><div class="line">	module.exports=INDEX.init();</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="打开引入index-js的html文件"><a href="#打开引入index-js的html文件" class="headerlink" title="打开引入index.js的html文件"></a>打开引入index.js的html文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">seajs.use([<span class="string">"index"</span>]); //引入index.js</div></pre></td></tr></table></figure>
<p><img src="/img/img1.png"></p>
<p>这里可以看到index.js中成功引入了a.js和b.js的方法，再看一下Network<br><img src="/img/img2.png"><br>这边加载了三个js文件，这并不符合我的需求，我希望我引入某个js文件的方法时，只需要加载那个方法，而不是整个js文件都加载进来，所以我需要合并js，添加一个gulp task任务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'mergeScripts'</span>,<span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">        <span class="built_in">return</span> gulp.src([<span class="string">'./src/js/a.js'</span>,<span class="string">'./src/js/b.js'</span>,<span class="string">'./src/js/index.js'</span>])    </div><div class="line">            .pipe(uglify(&#123;//压缩js</div><div class="line">             mangle: <span class="literal">true</span>,//类型：Boolean 默认：<span class="literal">true</span> 是否修改变量名</div><div class="line">             mangle: &#123; except: [<span class="string">'require'</span>, <span class="string">'exports'</span>, <span class="string">'module'</span>, <span class="string">'$'</span>] &#125;//排除混淆关键字</div><div class="line">             &#125;))</div><div class="line">            .pipe(concat(<span class="string">'index.js'</span>))  //生成js</div><div class="line">            .pipe(gulp.dest(<span class="string">'./build/js/'</span>));  //生成合并后的js的路径   </div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp mergeScripts</div></pre></td></tr></table></figure>
<p><img src="/img/img3.png"><br>合并是合并了，但是还是加载了三个js<br>这里需要引入gulp-seajs-transport来具象化js模块<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> transport = <span class="built_in">require</span>(<span class="string">'gulp-seajs-transport'</span>);</div><div class="line">.pipe(transport());</div></pre></td></tr></table></figure></p>
<p><img src="/img/img4.png"><br>完成，既加载了我所需要的方法，又减少了http请求<br>over</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Gulp.js 是基于 Node.js 构建的，可以建项目并减少频繁的 IO 操作的化构建工具&lt;br&gt;这里我采用 &lt;a href=&quot;http://seajs.org/&quot; target=&quot;_blank&quot;&gt;seajs&lt;/a&gt;来管理我的javascript代码，提高JavaScript代码的可读性和清晰度，解决目前JavaScript编程中普遍存在的依赖关系混乱和代码纠缠等问题，方便代码的编写和维护。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gulp安装就不赘述&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;引入seajs&quot;&gt;&lt;a href=&quot;#引入seajs&quot; class=&quot;headerlink&quot; title=&quot;引入seajs&quot;&gt;&lt;/a&gt;引入seajs&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;script &lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; src=&lt;span class=&quot;string&quot;&gt;&quot;../../src/js/sea.js&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="gulp" scheme="http://zengdh.com/tags/gulp/"/>
    
      <category term="seajs" scheme="http://zengdh.com/tags/seajs/"/>
    
      <category term="gulp-seajs-transport" scheme="http://zengdh.com/tags/gulp-seajs-transport/"/>
    
  </entry>
  
</feed>
